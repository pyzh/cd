.TH wxFrame 3 "wx 1.8" "" "Erlang Module Definition"
.SH NAME
wxFrame \- See external documentation: wxFrame.
.SH DESCRIPTION
.LP
See external documentation: wxFrame\&.
.LP
This class is derived (and can use functions) from: 
.br
\fBwxTopLevelWindow\fR\& 
.br
\fBwxWindow\fR\& 
.br
\fBwxEvtHandler\fR\& 
.SH "DATA TYPES"

.RS 2
.TP 2
.B
wxFrame():

.RS 2
.LP
An object reference, The representation is internal and can be changed without notice\&. It can\&'t be used for comparsion stored on disc or distributed for use on other nodes\&.
.RE
.RE
.SH EXPORTS
.LP
.B
new() -> \fBwxFrame()\fR\&
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
new(Parent, Id, Title) -> \fBwxFrame()\fR\&
.br
.RS
.LP
Types:

.RS 3
Parent = \fBwxWindow:wxWindow()\fR\&
.br
Id = integer()
.br
Title = \fBunicode:chardata()\fR\&
.br
.RE
.RE
.RS
.LP
Equivalent to \fBnew(Parent, Id, Title, [])\fR\&\&.
.RE
.LP
.B
new(Parent, Id, Title, Options::[Option]) -> \fBwxFrame()\fR\&
.br
.RS
.LP
Types:

.RS 3
Parent = \fBwxWindow:wxWindow()\fR\&
.br
Id = integer()
.br
Title = \fBunicode:chardata()\fR\&
.br
Option = {pos, {X::integer(), Y::integer()}} | {size, {W::integer(), H::integer()}} | {style, integer()}
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
create(This, Parent, Id, Title) -> boolean()
.br
.RS
.LP
Types:

.RS 3
This = \fBwxFrame()\fR\&
.br
Parent = \fBwxWindow:wxWindow()\fR\&
.br
Id = integer()
.br
Title = \fBunicode:chardata()\fR\&
.br
.RE
.RE
.RS
.LP
Equivalent to \fBcreate(This, Parent, Id, Title, [])\fR\&\&.
.RE
.LP
.B
create(This, Parent, Id, Title, Options::[Option]) -> boolean()
.br
.RS
.LP
Types:

.RS 3
This = \fBwxFrame()\fR\&
.br
Parent = \fBwxWindow:wxWindow()\fR\&
.br
Id = integer()
.br
Title = \fBunicode:chardata()\fR\&
.br
Option = {pos, {X::integer(), Y::integer()}} | {size, {W::integer(), H::integer()}} | {style, integer()}
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
createStatusBar(This) -> \fBwxStatusBar:wxStatusBar()\fR\&
.br
.RS
.LP
Types:

.RS 3
This = \fBwxFrame()\fR\&
.br
.RE
.RE
.RS
.LP
Equivalent to \fBcreateStatusBar(This, [])\fR\&\&.
.RE
.LP
.B
createStatusBar(This, Options::[Option]) -> \fBwxStatusBar:wxStatusBar()\fR\&
.br
.RS
.LP
Types:

.RS 3
This = \fBwxFrame()\fR\&
.br
Option = {number, integer()} | {style, integer()} | {id, integer()}
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
createToolBar(This) -> \fBwxToolBar:wxToolBar()\fR\&
.br
.RS
.LP
Types:

.RS 3
This = \fBwxFrame()\fR\&
.br
.RE
.RE
.RS
.LP
Equivalent to \fBcreateToolBar(This, [])\fR\&\&.
.RE
.LP
.B
createToolBar(This, Options::[Option]) -> \fBwxToolBar:wxToolBar()\fR\&
.br
.RS
.LP
Types:

.RS 3
This = \fBwxFrame()\fR\&
.br
Option = {style, integer()} | {id, integer()}
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getClientAreaOrigin(This) -> {X::integer(), Y::integer()}
.br
.RS
.LP
Types:

.RS 3
This = \fBwxFrame()\fR\&
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getMenuBar(This) -> \fBwxMenuBar:wxMenuBar()\fR\&
.br
.RS
.LP
Types:

.RS 3
This = \fBwxFrame()\fR\&
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getStatusBar(This) -> \fBwxStatusBar:wxStatusBar()\fR\&
.br
.RS
.LP
Types:

.RS 3
This = \fBwxFrame()\fR\&
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getStatusBarPane(This) -> integer()
.br
.RS
.LP
Types:

.RS 3
This = \fBwxFrame()\fR\&
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getToolBar(This) -> \fBwxToolBar:wxToolBar()\fR\&
.br
.RS
.LP
Types:

.RS 3
This = \fBwxFrame()\fR\&
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
processCommand(This, Winid) -> boolean()
.br
.RS
.LP
Types:

.RS 3
This = \fBwxFrame()\fR\&
.br
Winid = integer()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
sendSizeEvent(This) -> ok
.br
.RS
.LP
Types:

.RS 3
This = \fBwxFrame()\fR\&
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setMenuBar(This, Menubar) -> ok
.br
.RS
.LP
Types:

.RS 3
This = \fBwxFrame()\fR\&
.br
Menubar = \fBwxMenuBar:wxMenuBar()\fR\&
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setStatusBar(This, Statbar) -> ok
.br
.RS
.LP
Types:

.RS 3
This = \fBwxFrame()\fR\&
.br
Statbar = \fBwxStatusBar:wxStatusBar()\fR\&
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setStatusBarPane(This, N) -> ok
.br
.RS
.LP
Types:

.RS 3
This = \fBwxFrame()\fR\&
.br
N = integer()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setStatusText(This, Text) -> ok
.br
.RS
.LP
Types:

.RS 3
This = \fBwxFrame()\fR\&
.br
Text = \fBunicode:chardata()\fR\&
.br
.RE
.RE
.RS
.LP
Equivalent to \fBsetStatusText(This, Text, [])\fR\&\&.
.RE
.LP
.B
setStatusText(This, Text, Options::[Option]) -> ok
.br
.RS
.LP
Types:

.RS 3
This = \fBwxFrame()\fR\&
.br
Text = \fBunicode:chardata()\fR\&
.br
Option = {number, integer()}
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setStatusWidths(This, Widths_field) -> ok
.br
.RS
.LP
Types:

.RS 3
This = \fBwxFrame()\fR\&
.br
Widths_field = [integer()]
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setToolBar(This, Toolbar) -> ok
.br
.RS
.LP
Types:

.RS 3
This = \fBwxFrame()\fR\&
.br
Toolbar = \fBwxToolBar:wxToolBar()\fR\&
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
destroy(This::\fBwxFrame()\fR\&) -> ok
.br
.RS
.LP
Destroys this object, do not use object again
.RE
.SH AUTHORS
.LP

.I
<>