.TH wxScrolledWindow 3 "wx 1.8" "" "Erlang Module Definition"
.SH NAME
wxScrolledWindow \- See external documentation: wxScrolledWindow.
.SH DESCRIPTION
.LP
See external documentation: wxScrolledWindow\&.
.LP
This class is derived (and can use functions) from: 
.br
\fBwxPanel\fR\& 
.br
\fBwxWindow\fR\& 
.br
\fBwxEvtHandler\fR\& 
.SH "DATA TYPES"

.RS 2
.TP 2
.B
wxScrolledWindow():

.RS 2
.LP
An object reference, The representation is internal and can be changed without notice\&. It can\&'t be used for comparsion stored on disc or distributed for use on other nodes\&.
.RE
.RE
.SH EXPORTS
.LP
.B
new() -> \fBwxScrolledWindow()\fR\&
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
new(Parent) -> \fBwxScrolledWindow()\fR\&
.br
.RS
.LP
Types:

.RS 3
Parent = \fBwxWindow:wxWindow()\fR\&
.br
.RE
.RE
.RS
.LP
Equivalent to \fBnew(Parent, [])\fR\&\&.
.RE
.LP
.B
new(Parent, Options::[Option]) -> \fBwxScrolledWindow()\fR\&
.br
.RS
.LP
Types:

.RS 3
Parent = \fBwxWindow:wxWindow()\fR\&
.br
Option = {winid, integer()} | {pos, {X::integer(), Y::integer()}} | {size, {W::integer(), H::integer()}} | {style, integer()}
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
calcScrolledPosition(This, Pt) -> {X::integer(), Y::integer()}
.br
.RS
.LP
Types:

.RS 3
This = \fBwxScrolledWindow()\fR\&
.br
Pt = {X::integer(), Y::integer()}
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
calcScrolledPosition(This, X, Y) -> {Xx::integer(), Yy::integer()}
.br
.RS
.LP
Types:

.RS 3
This = \fBwxScrolledWindow()\fR\&
.br
X = integer()
.br
Y = integer()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
calcUnscrolledPosition(This, Pt) -> {X::integer(), Y::integer()}
.br
.RS
.LP
Types:

.RS 3
This = \fBwxScrolledWindow()\fR\&
.br
Pt = {X::integer(), Y::integer()}
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
calcUnscrolledPosition(This, X, Y) -> {Xx::integer(), Yy::integer()}
.br
.RS
.LP
Types:

.RS 3
This = \fBwxScrolledWindow()\fR\&
.br
X = integer()
.br
Y = integer()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
enableScrolling(This, X_scrolling, Y_scrolling) -> ok
.br
.RS
.LP
Types:

.RS 3
This = \fBwxScrolledWindow()\fR\&
.br
X_scrolling = boolean()
.br
Y_scrolling = boolean()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getScrollPixelsPerUnit(This) -> {PixelsPerUnitX::integer(), PixelsPerUnitY::integer()}
.br
.RS
.LP
Types:

.RS 3
This = \fBwxScrolledWindow()\fR\&
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getViewStart(This) -> {X::integer(), Y::integer()}
.br
.RS
.LP
Types:

.RS 3
This = \fBwxScrolledWindow()\fR\&
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
doPrepareDC(This, Dc) -> ok
.br
.RS
.LP
Types:

.RS 3
This = \fBwxScrolledWindow()\fR\&
.br
Dc = \fBwxDC:wxDC()\fR\&
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
prepareDC(This, Dc) -> ok
.br
.RS
.LP
Types:

.RS 3
This = \fBwxScrolledWindow()\fR\&
.br
Dc = \fBwxDC:wxDC()\fR\&
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
scroll(This, X, Y) -> ok
.br
.RS
.LP
Types:

.RS 3
This = \fBwxScrolledWindow()\fR\&
.br
X = integer()
.br
Y = integer()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setScrollbars(This, PixelsPerUnitX, PixelsPerUnitY, NoUnitsX, NoUnitsY) -> ok
.br
.RS
.LP
Types:

.RS 3
This = \fBwxScrolledWindow()\fR\&
.br
PixelsPerUnitX = integer()
.br
PixelsPerUnitY = integer()
.br
NoUnitsX = integer()
.br
NoUnitsY = integer()
.br
.RE
.RE
.RS
.LP
Equivalent to \fBsetScrollbars(This, PixelsPerUnitX, PixelsPerUnitY, NoUnitsX, NoUnitsY, [])\fR\&\&.
.RE
.LP
.B
setScrollbars(This, PixelsPerUnitX, PixelsPerUnitY, NoUnitsX, NoUnitsY, Options::[Option]) -> ok
.br
.RS
.LP
Types:

.RS 3
This = \fBwxScrolledWindow()\fR\&
.br
PixelsPerUnitX = integer()
.br
PixelsPerUnitY = integer()
.br
NoUnitsX = integer()
.br
NoUnitsY = integer()
.br
Option = {xPos, integer()} | {yPos, integer()} | {noRefresh, boolean()}
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setScrollRate(This, Xstep, Ystep) -> ok
.br
.RS
.LP
Types:

.RS 3
This = \fBwxScrolledWindow()\fR\&
.br
Xstep = integer()
.br
Ystep = integer()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setTargetWindow(This, Target) -> ok
.br
.RS
.LP
Types:

.RS 3
This = \fBwxScrolledWindow()\fR\&
.br
Target = \fBwxWindow:wxWindow()\fR\&
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
destroy(This::\fBwxScrolledWindow()\fR\&) -> ok
.br
.RS
.LP
Destroys this object, do not use object again
.RE
.SH AUTHORS
.LP

.I
<>