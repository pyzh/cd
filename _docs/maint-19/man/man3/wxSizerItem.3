.TH wxSizerItem 3 "wx 1.8" "" "Erlang Module Definition"
.SH NAME
wxSizerItem \- See external documentation: wxSizerItem.
.SH DESCRIPTION
.LP
See external documentation: wxSizerItem\&.
.SH "DATA TYPES"

.RS 2
.TP 2
.B
wxSizerItem():

.RS 2
.LP
An object reference, The representation is internal and can be changed without notice\&. It can\&'t be used for comparsion stored on disc or distributed for use on other nodes\&.
.RE
.RE
.SH EXPORTS
.LP
.B
new() -> \fBwxSizerItem()\fR\&
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
new(Window, Flags) -> \fBwxSizerItem()\fR\&
.br
.RS
.LP
Types:

.RS 3
Window = \fBwxWindow:wxWindow()\fR\& | \fBwxSizer:wxSizer()\fR\&
.br
Flags = \fBwxSizerFlags:wxSizerFlags()\fR\&
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
new(Width, Height, Flags) -> \fBwxSizerItem()\fR\&
.br
.RS
.LP
Types:

.RS 3
Width = integer()
.br
Height = integer()
.br
Flags = \fBwxSizerFlags:wxSizerFlags()\fR\&
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
new(Window, Proportion, Flag, Border, UserData) -> \fBwxSizerItem()\fR\&
.br
.RS
.LP
Types:

.RS 3
Window = \fBwxWindow:wxWindow()\fR\& | \fBwxSizer:wxSizer()\fR\&
.br
Proportion = integer()
.br
Flag = integer()
.br
Border = integer()
.br
UserData = \fBwx:wx_object()\fR\&
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
new(Width, Height, Proportion, Flag, Border, UserData) -> \fBwxSizerItem()\fR\&
.br
.RS
.LP
Types:

.RS 3
Width = integer()
.br
Height = integer()
.br
Proportion = integer()
.br
Flag = integer()
.br
Border = integer()
.br
UserData = \fBwx:wx_object()\fR\&
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
calcMin(This) -> {W::integer(), H::integer()}
.br
.RS
.LP
Types:

.RS 3
This = \fBwxSizerItem()\fR\&
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
deleteWindows(This) -> ok
.br
.RS
.LP
Types:

.RS 3
This = \fBwxSizerItem()\fR\&
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
detachSizer(This) -> ok
.br
.RS
.LP
Types:

.RS 3
This = \fBwxSizerItem()\fR\&
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getBorder(This) -> integer()
.br
.RS
.LP
Types:

.RS 3
This = \fBwxSizerItem()\fR\&
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getFlag(This) -> integer()
.br
.RS
.LP
Types:

.RS 3
This = \fBwxSizerItem()\fR\&
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getMinSize(This) -> {W::integer(), H::integer()}
.br
.RS
.LP
Types:

.RS 3
This = \fBwxSizerItem()\fR\&
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getPosition(This) -> {X::integer(), Y::integer()}
.br
.RS
.LP
Types:

.RS 3
This = \fBwxSizerItem()\fR\&
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getProportion(This) -> integer()
.br
.RS
.LP
Types:

.RS 3
This = \fBwxSizerItem()\fR\&
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getRatio(This) -> number()
.br
.RS
.LP
Types:

.RS 3
This = \fBwxSizerItem()\fR\&
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getRect(This) -> {X::integer(), Y::integer(), W::integer(), H::integer()}
.br
.RS
.LP
Types:

.RS 3
This = \fBwxSizerItem()\fR\&
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getSize(This) -> {W::integer(), H::integer()}
.br
.RS
.LP
Types:

.RS 3
This = \fBwxSizerItem()\fR\&
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getSizer(This) -> \fBwxSizer:wxSizer()\fR\&
.br
.RS
.LP
Types:

.RS 3
This = \fBwxSizerItem()\fR\&
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getSpacer(This) -> {W::integer(), H::integer()}
.br
.RS
.LP
Types:

.RS 3
This = \fBwxSizerItem()\fR\&
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getUserData(This) -> \fBwx:wx_object()\fR\&
.br
.RS
.LP
Types:

.RS 3
This = \fBwxSizerItem()\fR\&
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getWindow(This) -> \fBwxWindow:wxWindow()\fR\&
.br
.RS
.LP
Types:

.RS 3
This = \fBwxSizerItem()\fR\&
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
isSizer(This) -> boolean()
.br
.RS
.LP
Types:

.RS 3
This = \fBwxSizerItem()\fR\&
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
isShown(This) -> boolean()
.br
.RS
.LP
Types:

.RS 3
This = \fBwxSizerItem()\fR\&
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
isSpacer(This) -> boolean()
.br
.RS
.LP
Types:

.RS 3
This = \fBwxSizerItem()\fR\&
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
isWindow(This) -> boolean()
.br
.RS
.LP
Types:

.RS 3
This = \fBwxSizerItem()\fR\&
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setBorder(This, Border) -> ok
.br
.RS
.LP
Types:

.RS 3
This = \fBwxSizerItem()\fR\&
.br
Border = integer()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setDimension(This, Pos, Size) -> ok
.br
.RS
.LP
Types:

.RS 3
This = \fBwxSizerItem()\fR\&
.br
Pos = {X::integer(), Y::integer()}
.br
Size = {W::integer(), H::integer()}
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setFlag(This, Flag) -> ok
.br
.RS
.LP
Types:

.RS 3
This = \fBwxSizerItem()\fR\&
.br
Flag = integer()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setInitSize(This, X, Y) -> ok
.br
.RS
.LP
Types:

.RS 3
This = \fBwxSizerItem()\fR\&
.br
X = integer()
.br
Y = integer()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setMinSize(This, Size) -> ok
.br
.RS
.LP
Types:

.RS 3
This = \fBwxSizerItem()\fR\&
.br
Size = {W::integer(), H::integer()}
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setMinSize(This, X, Y) -> ok
.br
.RS
.LP
Types:

.RS 3
This = \fBwxSizerItem()\fR\&
.br
X = integer()
.br
Y = integer()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setProportion(This, Proportion) -> ok
.br
.RS
.LP
Types:

.RS 3
This = \fBwxSizerItem()\fR\&
.br
Proportion = integer()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setRatio(This, Ratio) -> ok
.br
.RS
.LP
Types:

.RS 3
This = \fBwxSizerItem()\fR\&
.br
Ratio = number()
.br
.RE
.RE
.RS
.LP
See external documentation\&. 
.br
Also:
.br
setRatio(This, Size) -> \&'ok\&' when
.br
This::wxSizerItem(), Size::{W::integer(), H::integer()}\&.
.br

.RE
.LP
.B
setRatio(This, Width, Height) -> ok
.br
.RS
.LP
Types:

.RS 3
This = \fBwxSizerItem()\fR\&
.br
Width = integer()
.br
Height = integer()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setSizer(This, Sizer) -> ok
.br
.RS
.LP
Types:

.RS 3
This = \fBwxSizerItem()\fR\&
.br
Sizer = \fBwxSizer:wxSizer()\fR\&
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setSpacer(This, Size) -> ok
.br
.RS
.LP
Types:

.RS 3
This = \fBwxSizerItem()\fR\&
.br
Size = {W::integer(), H::integer()}
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setSpacer(This, Width, Height) -> ok
.br
.RS
.LP
Types:

.RS 3
This = \fBwxSizerItem()\fR\&
.br
Width = integer()
.br
Height = integer()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setWindow(This, Window) -> ok
.br
.RS
.LP
Types:

.RS 3
This = \fBwxSizerItem()\fR\&
.br
Window = \fBwxWindow:wxWindow()\fR\&
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
show(This, Show) -> ok
.br
.RS
.LP
Types:

.RS 3
This = \fBwxSizerItem()\fR\&
.br
Show = boolean()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
destroy(This::\fBwxSizerItem()\fR\&) -> ok
.br
.RS
.LP
Destroys this object, do not use object again
.RE
.SH AUTHORS
.LP

.I
<>