.TH wxGridBagSizer 3 "wx 1.8" "" "Erlang Module Definition"
.SH NAME
wxGridBagSizer \- See external documentation: wxGridBagSizer.
.SH DESCRIPTION
.LP
See external documentation: wxGridBagSizer\&.
.LP
This class is derived (and can use functions) from: 
.br
\fBwxFlexGridSizer\fR\& 
.br
\fBwxGridSizer\fR\& 
.br
\fBwxSizer\fR\& 
.SH "DATA TYPES"

.RS 2
.TP 2
.B
wxGridBagSizer():

.RS 2
.LP
An object reference, The representation is internal and can be changed without notice\&. It can\&'t be used for comparsion stored on disc or distributed for use on other nodes\&.
.RE
.RE
.SH EXPORTS
.LP
.B
new() -> \fBwxGridBagSizer()\fR\&
.br
.RS
.LP
Equivalent to \fBnew([])\fR\&\&.
.RE
.LP
.B
new(Options::[Option]) -> \fBwxGridBagSizer()\fR\&
.br
.RS
.LP
Types:

.RS 3
Option = {vgap, integer()} | {hgap, integer()}
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
add(This, Item) -> \fBwxSizerItem:wxSizerItem()\fR\&
.br
.RS
.LP
Types:

.RS 3
This = \fBwxGridBagSizer()\fR\&
.br
Item = \fBwxSizerItem:wxSizerItem()\fR\& | \fBwxGBSizerItem:wxGBSizerItem()\fR\&
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
add(This, Width, Height) -> \fBwxSizerItem:wxSizerItem()\fR\&
.br
.RS
.LP
Types:

.RS 3
This = \fBwxGridBagSizer()\fR\&
.br
Width = integer()
.br
Height = integer()
.br
.RE
.RE
.RS
.LP
See external documentation\&. 
.br
Also:
.br
add(This, Window, Pos) -> wxSizerItem:wxSizerItem() when
.br
This::wxGridBagSizer(), Window::wxWindow:wxWindow() | wxSizer:wxSizer(), Pos::{R::integer(), C::integer()};
.br
(This, Window, [Option]) -> wxSizerItem:wxSizerItem() when
.br
This::wxGridBagSizer(), Window::wxWindow:wxWindow() | wxSizer:wxSizer(),
.br
Option :: {\&'proportion\&', integer()}
.br
| {\&'flag\&', integer()}
.br
| {\&'border\&', integer()}
.br
| {\&'userData\&', wx:wx_object()}\&.
.br

.RE
.LP
.B
add(This, Width, Height, Pos) -> \fBwxSizerItem:wxSizerItem()\fR\&
.br
.RS
.LP
Types:

.RS 3
This = \fBwxGridBagSizer()\fR\&
.br
Width = integer()
.br
Height = integer()
.br
Pos = {R::integer(), C::integer()}
.br
.RE
.RE
.RS
.LP
See external documentation\&. 
.br
Also:
.br
add(This, Width, Height, [Option]) -> wxSizerItem:wxSizerItem() when
.br
This::wxGridBagSizer(), Width::integer(), Height::integer(),
.br
Option :: {\&'proportion\&', integer()}
.br
| {\&'flag\&', integer()}
.br
| {\&'border\&', integer()}
.br
| {\&'userData\&', wx:wx_object()};
.br
(This, Window, Pos, [Option]) -> wxSizerItem:wxSizerItem() when
.br
This::wxGridBagSizer(), Window::wxWindow:wxWindow() | wxSizer:wxSizer(), Pos::{R::integer(), C::integer()},
.br
Option :: {\&'span\&', {RS::integer(), CS::integer()}}
.br
| {\&'flag\&', integer()}
.br
| {\&'border\&', integer()}
.br
| {\&'userData\&', wx:wx_object()}\&.
.br

.RE
.LP
.B
add(This, Width, Height, Pos, Options::[Option]) -> \fBwxSizerItem:wxSizerItem()\fR\&
.br
.RS
.LP
Types:

.RS 3
This = \fBwxGridBagSizer()\fR\&
.br
Width = integer()
.br
Height = integer()
.br
Pos = {R::integer(), C::integer()}
.br
Option = {span, {RS::integer(), CS::integer()}} | {flag, integer()} | {border, integer()} | {userData, \fBwx:wx_object()\fR\&}
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
calcMin(This) -> {W::integer(), H::integer()}
.br
.RS
.LP
Types:

.RS 3
This = \fBwxGridBagSizer()\fR\&
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
checkForIntersection(This, Item) -> boolean()
.br
.RS
.LP
Types:

.RS 3
This = \fBwxGridBagSizer()\fR\&
.br
Item = \fBwxGBSizerItem:wxGBSizerItem()\fR\&
.br
.RE
.RE
.RS
.LP
Equivalent to \fBcheckForIntersection(This, Item, [])\fR\&\&.
.RE
.LP
.B
checkForIntersection(This, Pos, Span) -> boolean()
.br
.RS
.LP
Types:

.RS 3
This = \fBwxGridBagSizer()\fR\&
.br
Pos = {R::integer(), C::integer()}
.br
Span = {RS::integer(), CS::integer()}
.br
.RE
.RE
.RS
.LP
See external documentation\&. 
.br
Also:
.br
checkForIntersection(This, Item, [Option]) -> boolean() when
.br
This::wxGridBagSizer(), Item::wxGBSizerItem:wxGBSizerItem(),
.br
Option :: {\&'excludeItem\&', wxGBSizerItem:wxGBSizerItem()}\&.
.br

.RE
.LP
.B
checkForIntersection(This, Pos, Span, Options::[Option]) -> boolean()
.br
.RS
.LP
Types:

.RS 3
This = \fBwxGridBagSizer()\fR\&
.br
Pos = {R::integer(), C::integer()}
.br
Span = {RS::integer(), CS::integer()}
.br
Option = {excludeItem, \fBwxGBSizerItem:wxGBSizerItem()\fR\&}
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
findItem(This, Window) -> \fBwxGBSizerItem:wxGBSizerItem()\fR\&
.br
.RS
.LP
Types:

.RS 3
This = \fBwxGridBagSizer()\fR\&
.br
Window = \fBwxWindow:wxWindow()\fR\& | \fBwxSizer:wxSizer()\fR\&
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
findItemAtPoint(This, Pt) -> \fBwxGBSizerItem:wxGBSizerItem()\fR\&
.br
.RS
.LP
Types:

.RS 3
This = \fBwxGridBagSizer()\fR\&
.br
Pt = {X::integer(), Y::integer()}
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
findItemAtPosition(This, Pos) -> \fBwxGBSizerItem:wxGBSizerItem()\fR\&
.br
.RS
.LP
Types:

.RS 3
This = \fBwxGridBagSizer()\fR\&
.br
Pos = {R::integer(), C::integer()}
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
findItemWithData(This, UserData) -> \fBwxGBSizerItem:wxGBSizerItem()\fR\&
.br
.RS
.LP
Types:

.RS 3
This = \fBwxGridBagSizer()\fR\&
.br
UserData = \fBwx:wx_object()\fR\&
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getCellSize(This, Row, Col) -> {W::integer(), H::integer()}
.br
.RS
.LP
Types:

.RS 3
This = \fBwxGridBagSizer()\fR\&
.br
Row = integer()
.br
Col = integer()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getEmptyCellSize(This) -> {W::integer(), H::integer()}
.br
.RS
.LP
Types:

.RS 3
This = \fBwxGridBagSizer()\fR\&
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getItemPosition(This, Index) -> {R::integer(), C::integer()}
.br
.RS
.LP
Types:

.RS 3
This = \fBwxGridBagSizer()\fR\&
.br
Index = integer()
.br
.RE
.RE
.RS
.LP
See external documentation\&. 
.br
Also:
.br
getItemPosition(This, Window) -> {R::integer(), C::integer()} when
.br
This::wxGridBagSizer(), Window::wxWindow:wxWindow() | wxSizer:wxSizer()\&.
.br

.RE
.LP
.B
getItemSpan(This, Index) -> {RS::integer(), CS::integer()}
.br
.RS
.LP
Types:

.RS 3
This = \fBwxGridBagSizer()\fR\&
.br
Index = integer()
.br
.RE
.RE
.RS
.LP
See external documentation\&. 
.br
Also:
.br
getItemSpan(This, Window) -> {RS::integer(), CS::integer()} when
.br
This::wxGridBagSizer(), Window::wxWindow:wxWindow() | wxSizer:wxSizer()\&.
.br

.RE
.LP
.B
setEmptyCellSize(This, Sz) -> ok
.br
.RS
.LP
Types:

.RS 3
This = \fBwxGridBagSizer()\fR\&
.br
Sz = {W::integer(), H::integer()}
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setItemPosition(This, Index, Pos) -> boolean()
.br
.RS
.LP
Types:

.RS 3
This = \fBwxGridBagSizer()\fR\&
.br
Index = integer()
.br
Pos = {R::integer(), C::integer()}
.br
.RE
.RE
.RS
.LP
See external documentation\&. 
.br
Also:
.br
setItemPosition(This, Window, Pos) -> boolean() when
.br
This::wxGridBagSizer(), Window::wxWindow:wxWindow() | wxSizer:wxSizer(), Pos::{R::integer(), C::integer()}\&.
.br

.RE
.LP
.B
setItemSpan(This, Index, Span) -> boolean()
.br
.RS
.LP
Types:

.RS 3
This = \fBwxGridBagSizer()\fR\&
.br
Index = integer()
.br
Span = {RS::integer(), CS::integer()}
.br
.RE
.RE
.RS
.LP
See external documentation\&. 
.br
Also:
.br
setItemSpan(This, Window, Span) -> boolean() when
.br
This::wxGridBagSizer(), Window::wxWindow:wxWindow() | wxSizer:wxSizer(), Span::{RS::integer(), CS::integer()}\&.
.br

.RE
.LP
.B
destroy(This::\fBwxGridBagSizer()\fR\&) -> ok
.br
.RS
.LP
Destroys this object, do not use object again
.RE
.SH AUTHORS
.LP

.I
<>