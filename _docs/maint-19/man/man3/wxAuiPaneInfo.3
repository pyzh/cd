.TH wxAuiPaneInfo 3 "wx 1.8" "" "Erlang Module Definition"
.SH NAME
wxAuiPaneInfo \- See external documentation: wxAuiPaneInfo.
.SH DESCRIPTION
.LP
See external documentation: wxAuiPaneInfo\&.
.SH "DATA TYPES"

.RS 2
.TP 2
.B
wxAuiPaneInfo():

.RS 2
.LP
An object reference, The representation is internal and can be changed without notice\&. It can\&'t be used for comparsion stored on disc or distributed for use on other nodes\&.
.RE
.RE
.SH EXPORTS
.LP
.B
new() -> \fBwxAuiPaneInfo()\fR\&
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
new(C) -> \fBwxAuiPaneInfo()\fR\&
.br
.RS
.LP
Types:

.RS 3
C = \fBwxAuiPaneInfo()\fR\&
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
bestSize(This, Size) -> \fBwxAuiPaneInfo()\fR\&
.br
.RS
.LP
Types:

.RS 3
This = \fBwxAuiPaneInfo()\fR\&
.br
Size = {W::integer(), H::integer()}
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
bestSize(This, X, Y) -> \fBwxAuiPaneInfo()\fR\&
.br
.RS
.LP
Types:

.RS 3
This = \fBwxAuiPaneInfo()\fR\&
.br
X = integer()
.br
Y = integer()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
bottom(This) -> \fBwxAuiPaneInfo()\fR\&
.br
.RS
.LP
Types:

.RS 3
This = \fBwxAuiPaneInfo()\fR\&
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
bottomDockable(This) -> \fBwxAuiPaneInfo()\fR\&
.br
.RS
.LP
Types:

.RS 3
This = \fBwxAuiPaneInfo()\fR\&
.br
.RE
.RE
.RS
.LP
Equivalent to \fBbottomDockable(This, [])\fR\&\&.
.RE
.LP
.B
bottomDockable(This, Options::[Option]) -> \fBwxAuiPaneInfo()\fR\&
.br
.RS
.LP
Types:

.RS 3
This = \fBwxAuiPaneInfo()\fR\&
.br
Option = {b, boolean()}
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
caption(This, C) -> \fBwxAuiPaneInfo()\fR\&
.br
.RS
.LP
Types:

.RS 3
This = \fBwxAuiPaneInfo()\fR\&
.br
C = \fBunicode:chardata()\fR\&
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
captionVisible(This) -> \fBwxAuiPaneInfo()\fR\&
.br
.RS
.LP
Types:

.RS 3
This = \fBwxAuiPaneInfo()\fR\&
.br
.RE
.RE
.RS
.LP
Equivalent to \fBcaptionVisible(This, [])\fR\&\&.
.RE
.LP
.B
captionVisible(This, Options::[Option]) -> \fBwxAuiPaneInfo()\fR\&
.br
.RS
.LP
Types:

.RS 3
This = \fBwxAuiPaneInfo()\fR\&
.br
Option = {visible, boolean()}
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
centre(This) -> \fBwxAuiPaneInfo()\fR\&
.br
.RS
.LP
Types:

.RS 3
This = \fBwxAuiPaneInfo()\fR\&
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
centrePane(This) -> \fBwxAuiPaneInfo()\fR\&
.br
.RS
.LP
Types:

.RS 3
This = \fBwxAuiPaneInfo()\fR\&
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
closeButton(This) -> \fBwxAuiPaneInfo()\fR\&
.br
.RS
.LP
Types:

.RS 3
This = \fBwxAuiPaneInfo()\fR\&
.br
.RE
.RE
.RS
.LP
Equivalent to \fBcloseButton(This, [])\fR\&\&.
.RE
.LP
.B
closeButton(This, Options::[Option]) -> \fBwxAuiPaneInfo()\fR\&
.br
.RS
.LP
Types:

.RS 3
This = \fBwxAuiPaneInfo()\fR\&
.br
Option = {visible, boolean()}
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
defaultPane(This) -> \fBwxAuiPaneInfo()\fR\&
.br
.RS
.LP
Types:

.RS 3
This = \fBwxAuiPaneInfo()\fR\&
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
destroyOnClose(This) -> \fBwxAuiPaneInfo()\fR\&
.br
.RS
.LP
Types:

.RS 3
This = \fBwxAuiPaneInfo()\fR\&
.br
.RE
.RE
.RS
.LP
Equivalent to \fBdestroyOnClose(This, [])\fR\&\&.
.RE
.LP
.B
destroyOnClose(This, Options::[Option]) -> \fBwxAuiPaneInfo()\fR\&
.br
.RS
.LP
Types:

.RS 3
This = \fBwxAuiPaneInfo()\fR\&
.br
Option = {b, boolean()}
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
direction(This, Direction) -> \fBwxAuiPaneInfo()\fR\&
.br
.RS
.LP
Types:

.RS 3
This = \fBwxAuiPaneInfo()\fR\&
.br
Direction = integer()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
dock(This) -> \fBwxAuiPaneInfo()\fR\&
.br
.RS
.LP
Types:

.RS 3
This = \fBwxAuiPaneInfo()\fR\&
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
dockable(This) -> \fBwxAuiPaneInfo()\fR\&
.br
.RS
.LP
Types:

.RS 3
This = \fBwxAuiPaneInfo()\fR\&
.br
.RE
.RE
.RS
.LP
Equivalent to \fBdockable(This, [])\fR\&\&.
.RE
.LP
.B
dockable(This, Options::[Option]) -> \fBwxAuiPaneInfo()\fR\&
.br
.RS
.LP
Types:

.RS 3
This = \fBwxAuiPaneInfo()\fR\&
.br
Option = {b, boolean()}
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
fixed(This) -> \fBwxAuiPaneInfo()\fR\&
.br
.RS
.LP
Types:

.RS 3
This = \fBwxAuiPaneInfo()\fR\&
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
float(This) -> \fBwxAuiPaneInfo()\fR\&
.br
.RS
.LP
Types:

.RS 3
This = \fBwxAuiPaneInfo()\fR\&
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
floatable(This) -> \fBwxAuiPaneInfo()\fR\&
.br
.RS
.LP
Types:

.RS 3
This = \fBwxAuiPaneInfo()\fR\&
.br
.RE
.RE
.RS
.LP
Equivalent to \fBfloatable(This, [])\fR\&\&.
.RE
.LP
.B
floatable(This, Options::[Option]) -> \fBwxAuiPaneInfo()\fR\&
.br
.RS
.LP
Types:

.RS 3
This = \fBwxAuiPaneInfo()\fR\&
.br
Option = {b, boolean()}
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
floatingPosition(This, Pos) -> \fBwxAuiPaneInfo()\fR\&
.br
.RS
.LP
Types:

.RS 3
This = \fBwxAuiPaneInfo()\fR\&
.br
Pos = {X::integer(), Y::integer()}
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
floatingPosition(This, X, Y) -> \fBwxAuiPaneInfo()\fR\&
.br
.RS
.LP
Types:

.RS 3
This = \fBwxAuiPaneInfo()\fR\&
.br
X = integer()
.br
Y = integer()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
floatingSize(This, Size) -> \fBwxAuiPaneInfo()\fR\&
.br
.RS
.LP
Types:

.RS 3
This = \fBwxAuiPaneInfo()\fR\&
.br
Size = {W::integer(), H::integer()}
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
floatingSize(This, X, Y) -> \fBwxAuiPaneInfo()\fR\&
.br
.RS
.LP
Types:

.RS 3
This = \fBwxAuiPaneInfo()\fR\&
.br
X = integer()
.br
Y = integer()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
gripper(This) -> \fBwxAuiPaneInfo()\fR\&
.br
.RS
.LP
Types:

.RS 3
This = \fBwxAuiPaneInfo()\fR\&
.br
.RE
.RE
.RS
.LP
Equivalent to \fBgripper(This, [])\fR\&\&.
.RE
.LP
.B
gripper(This, Options::[Option]) -> \fBwxAuiPaneInfo()\fR\&
.br
.RS
.LP
Types:

.RS 3
This = \fBwxAuiPaneInfo()\fR\&
.br
Option = {visible, boolean()}
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
gripperTop(This) -> \fBwxAuiPaneInfo()\fR\&
.br
.RS
.LP
Types:

.RS 3
This = \fBwxAuiPaneInfo()\fR\&
.br
.RE
.RE
.RS
.LP
Equivalent to \fBgripperTop(This, [])\fR\&\&.
.RE
.LP
.B
gripperTop(This, Options::[Option]) -> \fBwxAuiPaneInfo()\fR\&
.br
.RS
.LP
Types:

.RS 3
This = \fBwxAuiPaneInfo()\fR\&
.br
Option = {attop, boolean()}
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
hasBorder(This) -> boolean()
.br
.RS
.LP
Types:

.RS 3
This = \fBwxAuiPaneInfo()\fR\&
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
hasCaption(This) -> boolean()
.br
.RS
.LP
Types:

.RS 3
This = \fBwxAuiPaneInfo()\fR\&
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
hasCloseButton(This) -> boolean()
.br
.RS
.LP
Types:

.RS 3
This = \fBwxAuiPaneInfo()\fR\&
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
hasFlag(This, Flag) -> boolean()
.br
.RS
.LP
Types:

.RS 3
This = \fBwxAuiPaneInfo()\fR\&
.br
Flag = integer()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
hasGripper(This) -> boolean()
.br
.RS
.LP
Types:

.RS 3
This = \fBwxAuiPaneInfo()\fR\&
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
hasGripperTop(This) -> boolean()
.br
.RS
.LP
Types:

.RS 3
This = \fBwxAuiPaneInfo()\fR\&
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
hasMaximizeButton(This) -> boolean()
.br
.RS
.LP
Types:

.RS 3
This = \fBwxAuiPaneInfo()\fR\&
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
hasMinimizeButton(This) -> boolean()
.br
.RS
.LP
Types:

.RS 3
This = \fBwxAuiPaneInfo()\fR\&
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
hasPinButton(This) -> boolean()
.br
.RS
.LP
Types:

.RS 3
This = \fBwxAuiPaneInfo()\fR\&
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
hide(This) -> \fBwxAuiPaneInfo()\fR\&
.br
.RS
.LP
Types:

.RS 3
This = \fBwxAuiPaneInfo()\fR\&
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
isBottomDockable(This) -> boolean()
.br
.RS
.LP
Types:

.RS 3
This = \fBwxAuiPaneInfo()\fR\&
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
isDocked(This) -> boolean()
.br
.RS
.LP
Types:

.RS 3
This = \fBwxAuiPaneInfo()\fR\&
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
isFixed(This) -> boolean()
.br
.RS
.LP
Types:

.RS 3
This = \fBwxAuiPaneInfo()\fR\&
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
isFloatable(This) -> boolean()
.br
.RS
.LP
Types:

.RS 3
This = \fBwxAuiPaneInfo()\fR\&
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
isFloating(This) -> boolean()
.br
.RS
.LP
Types:

.RS 3
This = \fBwxAuiPaneInfo()\fR\&
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
isLeftDockable(This) -> boolean()
.br
.RS
.LP
Types:

.RS 3
This = \fBwxAuiPaneInfo()\fR\&
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
isMovable(This) -> boolean()
.br
.RS
.LP
Types:

.RS 3
This = \fBwxAuiPaneInfo()\fR\&
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
isOk(This) -> boolean()
.br
.RS
.LP
Types:

.RS 3
This = \fBwxAuiPaneInfo()\fR\&
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
isResizable(This) -> boolean()
.br
.RS
.LP
Types:

.RS 3
This = \fBwxAuiPaneInfo()\fR\&
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
isRightDockable(This) -> boolean()
.br
.RS
.LP
Types:

.RS 3
This = \fBwxAuiPaneInfo()\fR\&
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
isShown(This) -> boolean()
.br
.RS
.LP
Types:

.RS 3
This = \fBwxAuiPaneInfo()\fR\&
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
isToolbar(This) -> boolean()
.br
.RS
.LP
Types:

.RS 3
This = \fBwxAuiPaneInfo()\fR\&
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
isTopDockable(This) -> boolean()
.br
.RS
.LP
Types:

.RS 3
This = \fBwxAuiPaneInfo()\fR\&
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
layer(This, Layer) -> \fBwxAuiPaneInfo()\fR\&
.br
.RS
.LP
Types:

.RS 3
This = \fBwxAuiPaneInfo()\fR\&
.br
Layer = integer()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
left(This) -> \fBwxAuiPaneInfo()\fR\&
.br
.RS
.LP
Types:

.RS 3
This = \fBwxAuiPaneInfo()\fR\&
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
leftDockable(This) -> \fBwxAuiPaneInfo()\fR\&
.br
.RS
.LP
Types:

.RS 3
This = \fBwxAuiPaneInfo()\fR\&
.br
.RE
.RE
.RS
.LP
Equivalent to \fBleftDockable(This, [])\fR\&\&.
.RE
.LP
.B
leftDockable(This, Options::[Option]) -> \fBwxAuiPaneInfo()\fR\&
.br
.RS
.LP
Types:

.RS 3
This = \fBwxAuiPaneInfo()\fR\&
.br
Option = {b, boolean()}
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
maxSize(This, Size) -> \fBwxAuiPaneInfo()\fR\&
.br
.RS
.LP
Types:

.RS 3
This = \fBwxAuiPaneInfo()\fR\&
.br
Size = {W::integer(), H::integer()}
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
maxSize(This, X, Y) -> \fBwxAuiPaneInfo()\fR\&
.br
.RS
.LP
Types:

.RS 3
This = \fBwxAuiPaneInfo()\fR\&
.br
X = integer()
.br
Y = integer()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
maximizeButton(This) -> \fBwxAuiPaneInfo()\fR\&
.br
.RS
.LP
Types:

.RS 3
This = \fBwxAuiPaneInfo()\fR\&
.br
.RE
.RE
.RS
.LP
Equivalent to \fBmaximizeButton(This, [])\fR\&\&.
.RE
.LP
.B
maximizeButton(This, Options::[Option]) -> \fBwxAuiPaneInfo()\fR\&
.br
.RS
.LP
Types:

.RS 3
This = \fBwxAuiPaneInfo()\fR\&
.br
Option = {visible, boolean()}
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
minSize(This, Size) -> \fBwxAuiPaneInfo()\fR\&
.br
.RS
.LP
Types:

.RS 3
This = \fBwxAuiPaneInfo()\fR\&
.br
Size = {W::integer(), H::integer()}
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
minSize(This, X, Y) -> \fBwxAuiPaneInfo()\fR\&
.br
.RS
.LP
Types:

.RS 3
This = \fBwxAuiPaneInfo()\fR\&
.br
X = integer()
.br
Y = integer()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
minimizeButton(This) -> \fBwxAuiPaneInfo()\fR\&
.br
.RS
.LP
Types:

.RS 3
This = \fBwxAuiPaneInfo()\fR\&
.br
.RE
.RE
.RS
.LP
Equivalent to \fBminimizeButton(This, [])\fR\&\&.
.RE
.LP
.B
minimizeButton(This, Options::[Option]) -> \fBwxAuiPaneInfo()\fR\&
.br
.RS
.LP
Types:

.RS 3
This = \fBwxAuiPaneInfo()\fR\&
.br
Option = {visible, boolean()}
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
movable(This) -> \fBwxAuiPaneInfo()\fR\&
.br
.RS
.LP
Types:

.RS 3
This = \fBwxAuiPaneInfo()\fR\&
.br
.RE
.RE
.RS
.LP
Equivalent to \fBmovable(This, [])\fR\&\&.
.RE
.LP
.B
movable(This, Options::[Option]) -> \fBwxAuiPaneInfo()\fR\&
.br
.RS
.LP
Types:

.RS 3
This = \fBwxAuiPaneInfo()\fR\&
.br
Option = {b, boolean()}
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
name(This, N) -> \fBwxAuiPaneInfo()\fR\&
.br
.RS
.LP
Types:

.RS 3
This = \fBwxAuiPaneInfo()\fR\&
.br
N = \fBunicode:chardata()\fR\&
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
paneBorder(This) -> \fBwxAuiPaneInfo()\fR\&
.br
.RS
.LP
Types:

.RS 3
This = \fBwxAuiPaneInfo()\fR\&
.br
.RE
.RE
.RS
.LP
Equivalent to \fBpaneBorder(This, [])\fR\&\&.
.RE
.LP
.B
paneBorder(This, Options::[Option]) -> \fBwxAuiPaneInfo()\fR\&
.br
.RS
.LP
Types:

.RS 3
This = \fBwxAuiPaneInfo()\fR\&
.br
Option = {visible, boolean()}
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
pinButton(This) -> \fBwxAuiPaneInfo()\fR\&
.br
.RS
.LP
Types:

.RS 3
This = \fBwxAuiPaneInfo()\fR\&
.br
.RE
.RE
.RS
.LP
Equivalent to \fBpinButton(This, [])\fR\&\&.
.RE
.LP
.B
pinButton(This, Options::[Option]) -> \fBwxAuiPaneInfo()\fR\&
.br
.RS
.LP
Types:

.RS 3
This = \fBwxAuiPaneInfo()\fR\&
.br
Option = {visible, boolean()}
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
position(This, Pos) -> \fBwxAuiPaneInfo()\fR\&
.br
.RS
.LP
Types:

.RS 3
This = \fBwxAuiPaneInfo()\fR\&
.br
Pos = integer()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
resizable(This) -> \fBwxAuiPaneInfo()\fR\&
.br
.RS
.LP
Types:

.RS 3
This = \fBwxAuiPaneInfo()\fR\&
.br
.RE
.RE
.RS
.LP
Equivalent to \fBresizable(This, [])\fR\&\&.
.RE
.LP
.B
resizable(This, Options::[Option]) -> \fBwxAuiPaneInfo()\fR\&
.br
.RS
.LP
Types:

.RS 3
This = \fBwxAuiPaneInfo()\fR\&
.br
Option = {resizable, boolean()}
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
right(This) -> \fBwxAuiPaneInfo()\fR\&
.br
.RS
.LP
Types:

.RS 3
This = \fBwxAuiPaneInfo()\fR\&
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
rightDockable(This) -> \fBwxAuiPaneInfo()\fR\&
.br
.RS
.LP
Types:

.RS 3
This = \fBwxAuiPaneInfo()\fR\&
.br
.RE
.RE
.RS
.LP
Equivalent to \fBrightDockable(This, [])\fR\&\&.
.RE
.LP
.B
rightDockable(This, Options::[Option]) -> \fBwxAuiPaneInfo()\fR\&
.br
.RS
.LP
Types:

.RS 3
This = \fBwxAuiPaneInfo()\fR\&
.br
Option = {b, boolean()}
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
row(This, Row) -> \fBwxAuiPaneInfo()\fR\&
.br
.RS
.LP
Types:

.RS 3
This = \fBwxAuiPaneInfo()\fR\&
.br
Row = integer()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
safeSet(This, Source) -> ok
.br
.RS
.LP
Types:

.RS 3
This = \fBwxAuiPaneInfo()\fR\&
.br
Source = \fBwxAuiPaneInfo()\fR\&
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setFlag(This, Flag, Option_state) -> \fBwxAuiPaneInfo()\fR\&
.br
.RS
.LP
Types:

.RS 3
This = \fBwxAuiPaneInfo()\fR\&
.br
Flag = integer()
.br
Option_state = boolean()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
show(This) -> \fBwxAuiPaneInfo()\fR\&
.br
.RS
.LP
Types:

.RS 3
This = \fBwxAuiPaneInfo()\fR\&
.br
.RE
.RE
.RS
.LP
Equivalent to \fBshow(This, [])\fR\&\&.
.RE
.LP
.B
show(This, Options::[Option]) -> \fBwxAuiPaneInfo()\fR\&
.br
.RS
.LP
Types:

.RS 3
This = \fBwxAuiPaneInfo()\fR\&
.br
Option = {show, boolean()}
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
toolbarPane(This) -> \fBwxAuiPaneInfo()\fR\&
.br
.RS
.LP
Types:

.RS 3
This = \fBwxAuiPaneInfo()\fR\&
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
top(This) -> \fBwxAuiPaneInfo()\fR\&
.br
.RS
.LP
Types:

.RS 3
This = \fBwxAuiPaneInfo()\fR\&
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
topDockable(This) -> \fBwxAuiPaneInfo()\fR\&
.br
.RS
.LP
Types:

.RS 3
This = \fBwxAuiPaneInfo()\fR\&
.br
.RE
.RE
.RS
.LP
Equivalent to \fBtopDockable(This, [])\fR\&\&.
.RE
.LP
.B
topDockable(This, Options::[Option]) -> \fBwxAuiPaneInfo()\fR\&
.br
.RS
.LP
Types:

.RS 3
This = \fBwxAuiPaneInfo()\fR\&
.br
Option = {b, boolean()}
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
window(This, W) -> \fBwxAuiPaneInfo()\fR\&
.br
.RS
.LP
Types:

.RS 3
This = \fBwxAuiPaneInfo()\fR\&
.br
W = \fBwxWindow:wxWindow()\fR\&
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getWindow(This) -> \fBwxWindow:wxWindow()\fR\&
.br
.RS
.LP
Types:

.RS 3
This = \fBwxAuiPaneInfo()\fR\&
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getFrame(This) -> \fBwxFrame:wxFrame()\fR\&
.br
.RS
.LP
Types:

.RS 3
This = \fBwxAuiPaneInfo()\fR\&
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getDirection(This) -> integer()
.br
.RS
.LP
Types:

.RS 3
This = \fBwxAuiPaneInfo()\fR\&
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getLayer(This) -> integer()
.br
.RS
.LP
Types:

.RS 3
This = \fBwxAuiPaneInfo()\fR\&
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getRow(This) -> integer()
.br
.RS
.LP
Types:

.RS 3
This = \fBwxAuiPaneInfo()\fR\&
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getPosition(This) -> integer()
.br
.RS
.LP
Types:

.RS 3
This = \fBwxAuiPaneInfo()\fR\&
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getFloatingPosition(This) -> {X::integer(), Y::integer()}
.br
.RS
.LP
Types:

.RS 3
This = \fBwxAuiPaneInfo()\fR\&
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getFloatingSize(This) -> {W::integer(), H::integer()}
.br
.RS
.LP
Types:

.RS 3
This = \fBwxAuiPaneInfo()\fR\&
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
destroy(This::\fBwxAuiPaneInfo()\fR\&) -> ok
.br
.RS
.LP
Destroys this object, do not use object again
.RE
.SH AUTHORS
.LP

.I
<>