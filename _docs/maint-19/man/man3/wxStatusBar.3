.TH wxStatusBar 3 "wx 1.8" "" "Erlang Module Definition"
.SH NAME
wxStatusBar \- See external documentation: wxStatusBar.
.SH DESCRIPTION
.LP
See external documentation: wxStatusBar\&.
.LP
This class is derived (and can use functions) from: 
.br
\fBwxWindow\fR\& 
.br
\fBwxEvtHandler\fR\& 
.SH "DATA TYPES"

.RS 2
.TP 2
.B
wxStatusBar():

.RS 2
.LP
An object reference, The representation is internal and can be changed without notice\&. It can\&'t be used for comparsion stored on disc or distributed for use on other nodes\&.
.RE
.RE
.SH EXPORTS
.LP
.B
new() -> \fBwxStatusBar()\fR\&
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
new(Parent) -> \fBwxStatusBar()\fR\&
.br
.RS
.LP
Types:

.RS 3
Parent = \fBwxWindow:wxWindow()\fR\&
.br
.RE
.RE
.RS
.LP
Equivalent to \fBnew(Parent, [])\fR\&\&.
.RE
.LP
.B
new(Parent, Options::[Option]) -> \fBwxStatusBar()\fR\&
.br
.RS
.LP
Types:

.RS 3
Parent = \fBwxWindow:wxWindow()\fR\&
.br
Option = {winid, integer()} | {style, integer()}
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
create(This, Parent) -> boolean()
.br
.RS
.LP
Types:

.RS 3
This = \fBwxStatusBar()\fR\&
.br
Parent = \fBwxWindow:wxWindow()\fR\&
.br
.RE
.RE
.RS
.LP
Equivalent to \fBcreate(This, Parent, [])\fR\&\&.
.RE
.LP
.B
create(This, Parent, Options::[Option]) -> boolean()
.br
.RS
.LP
Types:

.RS 3
This = \fBwxStatusBar()\fR\&
.br
Parent = \fBwxWindow:wxWindow()\fR\&
.br
Option = {winid, integer()} | {style, integer()}
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getFieldRect(This, I) -> Result
.br
.RS
.LP
Types:

.RS 3
Result = {Res::boolean(), Rect::{X::integer(), Y::integer(), W::integer(), H::integer()}}
.br
This = \fBwxStatusBar()\fR\&
.br
I = integer()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getFieldsCount(This) -> integer()
.br
.RS
.LP
Types:

.RS 3
This = \fBwxStatusBar()\fR\&
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getStatusText(This) -> \fBunicode:charlist()\fR\&
.br
.RS
.LP
Types:

.RS 3
This = \fBwxStatusBar()\fR\&
.br
.RE
.RE
.RS
.LP
Equivalent to \fBgetStatusText(This, [])\fR\&\&.
.RE
.LP
.B
getStatusText(This, Options::[Option]) -> \fBunicode:charlist()\fR\&
.br
.RS
.LP
Types:

.RS 3
This = \fBwxStatusBar()\fR\&
.br
Option = {number, integer()}
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
popStatusText(This) -> ok
.br
.RS
.LP
Types:

.RS 3
This = \fBwxStatusBar()\fR\&
.br
.RE
.RE
.RS
.LP
Equivalent to \fBpopStatusText(This, [])\fR\&\&.
.RE
.LP
.B
popStatusText(This, Options::[Option]) -> ok
.br
.RS
.LP
Types:

.RS 3
This = \fBwxStatusBar()\fR\&
.br
Option = {number, integer()}
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
pushStatusText(This, Text) -> ok
.br
.RS
.LP
Types:

.RS 3
This = \fBwxStatusBar()\fR\&
.br
Text = \fBunicode:chardata()\fR\&
.br
.RE
.RE
.RS
.LP
Equivalent to \fBpushStatusText(This, Text, [])\fR\&\&.
.RE
.LP
.B
pushStatusText(This, Text, Options::[Option]) -> ok
.br
.RS
.LP
Types:

.RS 3
This = \fBwxStatusBar()\fR\&
.br
Text = \fBunicode:chardata()\fR\&
.br
Option = {number, integer()}
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setFieldsCount(This, Number) -> ok
.br
.RS
.LP
Types:

.RS 3
This = \fBwxStatusBar()\fR\&
.br
Number = integer()
.br
.RE
.RE
.RS
.LP
Equivalent to \fBsetFieldsCount(This, Number, [])\fR\&\&.
.RE
.LP
.B
setFieldsCount(This, Number, Options::[Option]) -> ok
.br
.RS
.LP
Types:

.RS 3
This = \fBwxStatusBar()\fR\&
.br
Number = integer()
.br
Option = {widths, [integer()]}
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setMinHeight(This, Height) -> ok
.br
.RS
.LP
Types:

.RS 3
This = \fBwxStatusBar()\fR\&
.br
Height = integer()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setStatusText(This, Text) -> ok
.br
.RS
.LP
Types:

.RS 3
This = \fBwxStatusBar()\fR\&
.br
Text = \fBunicode:chardata()\fR\&
.br
.RE
.RE
.RS
.LP
Equivalent to \fBsetStatusText(This, Text, [])\fR\&\&.
.RE
.LP
.B
setStatusText(This, Text, Options::[Option]) -> ok
.br
.RS
.LP
Types:

.RS 3
This = \fBwxStatusBar()\fR\&
.br
Text = \fBunicode:chardata()\fR\&
.br
Option = {number, integer()}
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setStatusWidths(This, Widths_field) -> ok
.br
.RS
.LP
Types:

.RS 3
This = \fBwxStatusBar()\fR\&
.br
Widths_field = [integer()]
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setStatusStyles(This, Styles) -> ok
.br
.RS
.LP
Types:

.RS 3
This = \fBwxStatusBar()\fR\&
.br
Styles = [integer()]
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
destroy(This::\fBwxStatusBar()\fR\&) -> ok
.br
.RS
.LP
Destroys this object, do not use object again
.RE
.SH AUTHORS
.LP

.I
<>