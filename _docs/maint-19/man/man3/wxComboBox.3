.TH wxComboBox 3 "wx 1.8" "" "Erlang Module Definition"
.SH NAME
wxComboBox \- See external documentation: wxComboBox.
.SH DESCRIPTION
.LP
See external documentation: wxComboBox\&.
.LP
This class is derived (and can use functions) from: 
.br
\fBwxControlWithItems\fR\& 
.br
\fBwxControl\fR\& 
.br
\fBwxWindow\fR\& 
.br
\fBwxEvtHandler\fR\& 
.SH "DATA TYPES"

.RS 2
.TP 2
.B
wxComboBox():

.RS 2
.LP
An object reference, The representation is internal and can be changed without notice\&. It can\&'t be used for comparsion stored on disc or distributed for use on other nodes\&.
.RE
.RE
.SH EXPORTS
.LP
.B
new() -> \fBwxComboBox()\fR\&
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
new(Parent, Id) -> \fBwxComboBox()\fR\&
.br
.RS
.LP
Types:

.RS 3
Parent = \fBwxWindow:wxWindow()\fR\&
.br
Id = integer()
.br
.RE
.RE
.RS
.LP
Equivalent to \fBnew(Parent, Id, [])\fR\&\&.
.RE
.LP
.B
new(Parent, Id, Options::[Option]) -> \fBwxComboBox()\fR\&
.br
.RS
.LP
Types:

.RS 3
Parent = \fBwxWindow:wxWindow()\fR\&
.br
Id = integer()
.br
Option = {value, \fBunicode:chardata()\fR\&} | {pos, {X::integer(), Y::integer()}} | {size, {W::integer(), H::integer()}} | {choices, [\fBunicode:chardata()\fR\&]} | {style, integer()} | {validator, \fBwx:wx_object()\fR\&}
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
create(This, Parent, Id, Value, Pos, Size, Choices) -> boolean()
.br
.RS
.LP
Types:

.RS 3
This = \fBwxComboBox()\fR\&
.br
Parent = \fBwxWindow:wxWindow()\fR\&
.br
Id = integer()
.br
Value = \fBunicode:chardata()\fR\&
.br
Pos = {X::integer(), Y::integer()}
.br
Size = {W::integer(), H::integer()}
.br
Choices = [\fBunicode:chardata()\fR\&]
.br
.RE
.RE
.RS
.LP
Equivalent to \fBcreate(This, Parent, Id, Value, Pos, Size, Choices, [])\fR\&\&.
.RE
.LP
.B
create(This, Parent, Id, Value, Pos, Size, Choices, Options::[Option]) -> boolean()
.br
.RS
.LP
Types:

.RS 3
This = \fBwxComboBox()\fR\&
.br
Parent = \fBwxWindow:wxWindow()\fR\&
.br
Id = integer()
.br
Value = \fBunicode:chardata()\fR\&
.br
Pos = {X::integer(), Y::integer()}
.br
Size = {W::integer(), H::integer()}
.br
Choices = [\fBunicode:chardata()\fR\&]
.br
Option = {style, integer()} | {validator, \fBwx:wx_object()\fR\&}
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
canCopy(This) -> boolean()
.br
.RS
.LP
Types:

.RS 3
This = \fBwxComboBox()\fR\&
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
canCut(This) -> boolean()
.br
.RS
.LP
Types:

.RS 3
This = \fBwxComboBox()\fR\&
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
canPaste(This) -> boolean()
.br
.RS
.LP
Types:

.RS 3
This = \fBwxComboBox()\fR\&
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
canRedo(This) -> boolean()
.br
.RS
.LP
Types:

.RS 3
This = \fBwxComboBox()\fR\&
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
canUndo(This) -> boolean()
.br
.RS
.LP
Types:

.RS 3
This = \fBwxComboBox()\fR\&
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
copy(This) -> ok
.br
.RS
.LP
Types:

.RS 3
This = \fBwxComboBox()\fR\&
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
cut(This) -> ok
.br
.RS
.LP
Types:

.RS 3
This = \fBwxComboBox()\fR\&
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getInsertionPoint(This) -> integer()
.br
.RS
.LP
Types:

.RS 3
This = \fBwxComboBox()\fR\&
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getLastPosition(This) -> integer()
.br
.RS
.LP
Types:

.RS 3
This = \fBwxComboBox()\fR\&
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getValue(This) -> \fBunicode:charlist()\fR\&
.br
.RS
.LP
Types:

.RS 3
This = \fBwxComboBox()\fR\&
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
paste(This) -> ok
.br
.RS
.LP
Types:

.RS 3
This = \fBwxComboBox()\fR\&
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
redo(This) -> ok
.br
.RS
.LP
Types:

.RS 3
This = \fBwxComboBox()\fR\&
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
replace(This, From, To, Value) -> ok
.br
.RS
.LP
Types:

.RS 3
This = \fBwxComboBox()\fR\&
.br
From = integer()
.br
To = integer()
.br
Value = \fBunicode:chardata()\fR\&
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
remove(This, From, To) -> ok
.br
.RS
.LP
Types:

.RS 3
This = \fBwxComboBox()\fR\&
.br
From = integer()
.br
To = integer()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setInsertionPoint(This, Pos) -> ok
.br
.RS
.LP
Types:

.RS 3
This = \fBwxComboBox()\fR\&
.br
Pos = integer()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setInsertionPointEnd(This) -> ok
.br
.RS
.LP
Types:

.RS 3
This = \fBwxComboBox()\fR\&
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setSelection(This, N) -> ok
.br
.RS
.LP
Types:

.RS 3
This = \fBwxComboBox()\fR\&
.br
N = integer()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setSelection(This, From, To) -> ok
.br
.RS
.LP
Types:

.RS 3
This = \fBwxComboBox()\fR\&
.br
From = integer()
.br
To = integer()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setValue(This, Value) -> ok
.br
.RS
.LP
Types:

.RS 3
This = \fBwxComboBox()\fR\&
.br
Value = \fBunicode:chardata()\fR\&
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
undo(This) -> ok
.br
.RS
.LP
Types:

.RS 3
This = \fBwxComboBox()\fR\&
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
destroy(This::\fBwxComboBox()\fR\&) -> ok
.br
.RS
.LP
Destroys this object, do not use object again
.RE
.SH AUTHORS
.LP

.I
<>