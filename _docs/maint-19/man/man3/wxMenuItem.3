.TH wxMenuItem 3 "wx 1.8" "" "Erlang Module Definition"
.SH NAME
wxMenuItem \- See external documentation: wxMenuItem.
.SH DESCRIPTION
.LP
See external documentation: wxMenuItem\&.
.SH "DATA TYPES"

.RS 2
.TP 2
.B
wxMenuItem():

.RS 2
.LP
An object reference, The representation is internal and can be changed without notice\&. It can\&'t be used for comparsion stored on disc or distributed for use on other nodes\&.
.RE
.RE
.SH EXPORTS
.LP
.B
new() -> \fBwxMenuItem()\fR\&
.br
.RS
.LP
Equivalent to \fBnew([])\fR\&\&.
.RE
.LP
.B
new(Options::[Option]) -> \fBwxMenuItem()\fR\&
.br
.RS
.LP
Types:

.RS 3
Option = {parentMenu, \fBwxMenu:wxMenu()\fR\&} | {id, integer()} | {text, \fBunicode:chardata()\fR\&} | {help, \fBunicode:chardata()\fR\&} | {kind, \fBwx:wx_enum()\fR\&} | {subMenu, \fBwxMenu:wxMenu()\fR\&}
.br
.RE
.RE
.RS
.LP
See external documentation\&. 
.br
Kind = ?wxITEM_SEPARATOR | ?wxITEM_NORMAL | ?wxITEM_CHECK | ?wxITEM_RADIO | ?wxITEM_MAX
.RE
.LP
.B
check(This) -> ok
.br
.RS
.LP
Types:

.RS 3
This = \fBwxMenuItem()\fR\&
.br
.RE
.RE
.RS
.LP
Equivalent to \fBcheck(This, [])\fR\&\&.
.RE
.LP
.B
check(This, Options::[Option]) -> ok
.br
.RS
.LP
Types:

.RS 3
This = \fBwxMenuItem()\fR\&
.br
Option = {check, boolean()}
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
enable(This) -> ok
.br
.RS
.LP
Types:

.RS 3
This = \fBwxMenuItem()\fR\&
.br
.RE
.RE
.RS
.LP
Equivalent to \fBenable(This, [])\fR\&\&.
.RE
.LP
.B
enable(This, Options::[Option]) -> ok
.br
.RS
.LP
Types:

.RS 3
This = \fBwxMenuItem()\fR\&
.br
Option = {enable, boolean()}
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getBitmap(This) -> \fBwxBitmap:wxBitmap()\fR\&
.br
.RS
.LP
Types:

.RS 3
This = \fBwxMenuItem()\fR\&
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getHelp(This) -> \fBunicode:charlist()\fR\&
.br
.RS
.LP
Types:

.RS 3
This = \fBwxMenuItem()\fR\&
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getId(This) -> integer()
.br
.RS
.LP
Types:

.RS 3
This = \fBwxMenuItem()\fR\&
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getKind(This) -> \fBwx:wx_enum()\fR\&
.br
.RS
.LP
Types:

.RS 3
This = \fBwxMenuItem()\fR\&
.br
.RE
.RE
.RS
.LP
See external documentation\&. 
.br
Res = ?wxITEM_SEPARATOR | ?wxITEM_NORMAL | ?wxITEM_CHECK | ?wxITEM_RADIO | ?wxITEM_MAX
.RE
.LP
.B
getLabel(This) -> \fBunicode:charlist()\fR\&
.br
.RS
.LP
Types:

.RS 3
This = \fBwxMenuItem()\fR\&
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getLabelFromText(Text) -> \fBunicode:charlist()\fR\&
.br
.RS
.LP
Types:

.RS 3
Text = \fBunicode:chardata()\fR\&
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getMenu(This) -> \fBwxMenu:wxMenu()\fR\&
.br
.RS
.LP
Types:

.RS 3
This = \fBwxMenuItem()\fR\&
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getText(This) -> \fBunicode:charlist()\fR\&
.br
.RS
.LP
Types:

.RS 3
This = \fBwxMenuItem()\fR\&
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getSubMenu(This) -> \fBwxMenu:wxMenu()\fR\&
.br
.RS
.LP
Types:

.RS 3
This = \fBwxMenuItem()\fR\&
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
isCheckable(This) -> boolean()
.br
.RS
.LP
Types:

.RS 3
This = \fBwxMenuItem()\fR\&
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
isChecked(This) -> boolean()
.br
.RS
.LP
Types:

.RS 3
This = \fBwxMenuItem()\fR\&
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
isEnabled(This) -> boolean()
.br
.RS
.LP
Types:

.RS 3
This = \fBwxMenuItem()\fR\&
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
isSeparator(This) -> boolean()
.br
.RS
.LP
Types:

.RS 3
This = \fBwxMenuItem()\fR\&
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
isSubMenu(This) -> boolean()
.br
.RS
.LP
Types:

.RS 3
This = \fBwxMenuItem()\fR\&
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setBitmap(This, Bitmap) -> ok
.br
.RS
.LP
Types:

.RS 3
This = \fBwxMenuItem()\fR\&
.br
Bitmap = \fBwxBitmap:wxBitmap()\fR\&
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setHelp(This, Str) -> ok
.br
.RS
.LP
Types:

.RS 3
This = \fBwxMenuItem()\fR\&
.br
Str = \fBunicode:chardata()\fR\&
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setMenu(This, Menu) -> ok
.br
.RS
.LP
Types:

.RS 3
This = \fBwxMenuItem()\fR\&
.br
Menu = \fBwxMenu:wxMenu()\fR\&
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setSubMenu(This, Menu) -> ok
.br
.RS
.LP
Types:

.RS 3
This = \fBwxMenuItem()\fR\&
.br
Menu = \fBwxMenu:wxMenu()\fR\&
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setText(This, Str) -> ok
.br
.RS
.LP
Types:

.RS 3
This = \fBwxMenuItem()\fR\&
.br
Str = \fBunicode:chardata()\fR\&
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
destroy(This::\fBwxMenuItem()\fR\&) -> ok
.br
.RS
.LP
Destroys this object, do not use object again
.RE
.SH AUTHORS
.LP

.I
<>