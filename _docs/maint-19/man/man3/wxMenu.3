.TH wxMenu 3 "wx 1.8" "" "Erlang Module Definition"
.SH NAME
wxMenu \- See external documentation: wxMenu.
.SH DESCRIPTION
.LP
See external documentation: wxMenu\&.
.LP
This class is derived (and can use functions) from: 
.br
\fBwxEvtHandler\fR\& 
.SH "DATA TYPES"

.RS 2
.TP 2
.B
wxMenu():

.RS 2
.LP
An object reference, The representation is internal and can be changed without notice\&. It can\&'t be used for comparsion stored on disc or distributed for use on other nodes\&.
.RE
.RE
.SH EXPORTS
.LP
.B
new() -> \fBwxMenu()\fR\&
.br
.RS
.LP
Equivalent to \fBnew([])\fR\&\&.
.RE
.LP
.B
new(Options::[Option]) -> \fBwxMenu()\fR\&
.br
.RS
.LP
Types:

.RS 3
Option = {style, integer()}
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
new(Title, Options::[Option]) -> \fBwxMenu()\fR\&
.br
.RS
.LP
Types:

.RS 3
Title = \fBunicode:chardata()\fR\&
.br
Option = {style, integer()}
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
append(This, Item) -> \fBwxMenuItem:wxMenuItem()\fR\&
.br
.RS
.LP
Types:

.RS 3
This = \fBwxMenu()\fR\&
.br
Item = \fBwxMenuItem:wxMenuItem()\fR\&
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
append(This, Itemid, Text) -> \fBwxMenuItem:wxMenuItem()\fR\&
.br
.RS
.LP
Types:

.RS 3
This = \fBwxMenu()\fR\&
.br
Itemid = integer()
.br
Text = \fBunicode:chardata()\fR\&
.br
.RE
.RE
.RS
.LP
Equivalent to \fBappend(This, Itemid, Text, [])\fR\&\&.
.RE
.LP
.B
append(This, Itemid, Text, Submenu) -> \fBwxMenuItem:wxMenuItem()\fR\&
.br
.RS
.LP
Types:

.RS 3
This = \fBwxMenu()\fR\&
.br
Itemid = integer()
.br
Text = \fBunicode:chardata()\fR\&
.br
Submenu = \fBwxMenu()\fR\&
.br
.RE
.RE
.RS
.LP
See external documentation\&. 
.br
Also:
.br
append(This, Itemid, Text, [Option]) -> wxMenuItem:wxMenuItem() when
.br
This::wxMenu(), Itemid::integer(), Text::unicode:chardata(),
.br
Option :: {\&'help\&', unicode:chardata()}
.br
| {\&'kind\&', wx:wx_enum()}\&.
.br

.LP

.br
Kind = ?wxITEM_SEPARATOR | ?wxITEM_NORMAL | ?wxITEM_CHECK | ?wxITEM_RADIO | ?wxITEM_MAX
.RE
.LP
.B
append(This, Itemid, Text, Help, IsCheckable) -> ok
.br
.RS
.LP
Types:

.RS 3
This = \fBwxMenu()\fR\&
.br
Itemid = integer()
.br
Text = \fBunicode:chardata()\fR\&
.br
Help = \fBunicode:chardata()\fR\&
.br
IsCheckable = boolean()
.br
.RE
.RE
.RS
.LP
See external documentation\&. 
.br
Also:
.br
append(This, Itemid, Text, Submenu, [Option]) -> wxMenuItem:wxMenuItem() when
.br
This::wxMenu(), Itemid::integer(), Text::unicode:chardata(), Submenu::wxMenu(),
.br
Option :: {\&'help\&', unicode:chardata()}\&.
.br

.RE
.LP
.B
appendCheckItem(This, Itemid, Text) -> \fBwxMenuItem:wxMenuItem()\fR\&
.br
.RS
.LP
Types:

.RS 3
This = \fBwxMenu()\fR\&
.br
Itemid = integer()
.br
Text = \fBunicode:chardata()\fR\&
.br
.RE
.RE
.RS
.LP
Equivalent to \fBappendCheckItem(This, Itemid, Text, [])\fR\&\&.
.RE
.LP
.B
appendCheckItem(This, Itemid, Text, Options::[Option]) -> \fBwxMenuItem:wxMenuItem()\fR\&
.br
.RS
.LP
Types:

.RS 3
This = \fBwxMenu()\fR\&
.br
Itemid = integer()
.br
Text = \fBunicode:chardata()\fR\&
.br
Option = {help, \fBunicode:chardata()\fR\&}
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
appendRadioItem(This, Itemid, Text) -> \fBwxMenuItem:wxMenuItem()\fR\&
.br
.RS
.LP
Types:

.RS 3
This = \fBwxMenu()\fR\&
.br
Itemid = integer()
.br
Text = \fBunicode:chardata()\fR\&
.br
.RE
.RE
.RS
.LP
Equivalent to \fBappendRadioItem(This, Itemid, Text, [])\fR\&\&.
.RE
.LP
.B
appendRadioItem(This, Itemid, Text, Options::[Option]) -> \fBwxMenuItem:wxMenuItem()\fR\&
.br
.RS
.LP
Types:

.RS 3
This = \fBwxMenu()\fR\&
.br
Itemid = integer()
.br
Text = \fBunicode:chardata()\fR\&
.br
Option = {help, \fBunicode:chardata()\fR\&}
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
appendSeparator(This) -> \fBwxMenuItem:wxMenuItem()\fR\&
.br
.RS
.LP
Types:

.RS 3
This = \fBwxMenu()\fR\&
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
break(This) -> ok
.br
.RS
.LP
Types:

.RS 3
This = \fBwxMenu()\fR\&
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
check(This, Itemid, Check) -> ok
.br
.RS
.LP
Types:

.RS 3
This = \fBwxMenu()\fR\&
.br
Itemid = integer()
.br
Check = boolean()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
delete(This, Itemid) -> boolean()
.br
.RS
.LP
Types:

.RS 3
This = \fBwxMenu()\fR\&
.br
Itemid = integer()
.br
.RE
.RE
.RS
.LP
See external documentation\&. 
.br
Also:
.br
delete(This, Item) -> boolean() when
.br
This::wxMenu(), Item::wxMenuItem:wxMenuItem()\&.
.br

.RE
.LP
.B
Destroy(This, Itemid) -> boolean()
.br
.RS
.LP
Types:

.RS 3
This = \fBwxMenu()\fR\&
.br
Itemid = integer()
.br
.RE
.RE
.RS
.LP
See external documentation\&. 
.br
Also:
.br
\&'Destroy\&'(This, Item) -> boolean() when
.br
This::wxMenu(), Item::wxMenuItem:wxMenuItem()\&.
.br

.RE
.LP
.B
enable(This, Itemid, Enable) -> ok
.br
.RS
.LP
Types:

.RS 3
This = \fBwxMenu()\fR\&
.br
Itemid = integer()
.br
Enable = boolean()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
findItem(This, Itemid) -> \fBwxMenuItem:wxMenuItem()\fR\&
.br
.RS
.LP
Types:

.RS 3
This = \fBwxMenu()\fR\&
.br
Itemid = integer()
.br
.RE
.RE
.RS
.LP
See external documentation\&. 
.br
Also:
.br
findItem(This, Item) -> integer() when
.br
This::wxMenu(), Item::unicode:chardata()\&.
.br

.RE
.LP
.B
findItemByPosition(This, Position) -> \fBwxMenuItem:wxMenuItem()\fR\&
.br
.RS
.LP
Types:

.RS 3
This = \fBwxMenu()\fR\&
.br
Position = integer()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getHelpString(This, Itemid) -> \fBunicode:charlist()\fR\&
.br
.RS
.LP
Types:

.RS 3
This = \fBwxMenu()\fR\&
.br
Itemid = integer()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getLabel(This, Itemid) -> \fBunicode:charlist()\fR\&
.br
.RS
.LP
Types:

.RS 3
This = \fBwxMenu()\fR\&
.br
Itemid = integer()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getMenuItemCount(This) -> integer()
.br
.RS
.LP
Types:

.RS 3
This = \fBwxMenu()\fR\&
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getMenuItems(This) -> [\fBwxMenuItem:wxMenuItem()\fR\&]
.br
.RS
.LP
Types:

.RS 3
This = \fBwxMenu()\fR\&
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getTitle(This) -> \fBunicode:charlist()\fR\&
.br
.RS
.LP
Types:

.RS 3
This = \fBwxMenu()\fR\&
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
insert(This, Pos, Itemid) -> \fBwxMenuItem:wxMenuItem()\fR\&
.br
.RS
.LP
Types:

.RS 3
This = \fBwxMenu()\fR\&
.br
Pos = integer()
.br
Itemid = integer()
.br
.RE
.RE
.RS
.LP
See external documentation\&. 
.br
Also:
.br
insert(This, Pos, Item) -> wxMenuItem:wxMenuItem() when
.br
This::wxMenu(), Pos::integer(), Item::wxMenuItem:wxMenuItem()\&.
.br

.LP

.br
Kind = ?wxITEM_SEPARATOR | ?wxITEM_NORMAL | ?wxITEM_CHECK | ?wxITEM_RADIO | ?wxITEM_MAX
.RE
.LP
.B
insert(This, Pos, Itemid, Options::[Option]) -> \fBwxMenuItem:wxMenuItem()\fR\&
.br
.RS
.LP
Types:

.RS 3
This = \fBwxMenu()\fR\&
.br
Pos = integer()
.br
Itemid = integer()
.br
Option = {text, \fBunicode:chardata()\fR\&} | {help, \fBunicode:chardata()\fR\&} | {kind, \fBwx:wx_enum()\fR\&}
.br
.RE
.RE
.RS
.LP
See external documentation\&. 
.br
Kind = ?wxITEM_SEPARATOR | ?wxITEM_NORMAL | ?wxITEM_CHECK | ?wxITEM_RADIO | ?wxITEM_MAX
.RE
.LP
.B
insert(This, Pos, Itemid, Text, Submenu) -> \fBwxMenuItem:wxMenuItem()\fR\&
.br
.RS
.LP
Types:

.RS 3
This = \fBwxMenu()\fR\&
.br
Pos = integer()
.br
Itemid = integer()
.br
Text = \fBunicode:chardata()\fR\&
.br
Submenu = \fBwxMenu()\fR\&
.br
.RE
.RE
.RS
.LP
Equivalent to \fBinsert(This, Pos, Itemid, Text, Submenu, [])\fR\&\&.
.RE
.LP
.B
insert(This, Pos, Itemid, Text, Help, IsCheckable) -> ok
.br
.RS
.LP
Types:

.RS 3
This = \fBwxMenu()\fR\&
.br
Pos = integer()
.br
Itemid = integer()
.br
Text = \fBunicode:chardata()\fR\&
.br
Help = \fBunicode:chardata()\fR\&
.br
IsCheckable = boolean()
.br
.RE
.RE
.RS
.LP
See external documentation\&. 
.br
Also:
.br
insert(This, Pos, Itemid, Text, Submenu, [Option]) -> wxMenuItem:wxMenuItem() when
.br
This::wxMenu(), Pos::integer(), Itemid::integer(), Text::unicode:chardata(), Submenu::wxMenu(),
.br
Option :: {\&'help\&', unicode:chardata()}\&.
.br

.RE
.LP
.B
insertCheckItem(This, Pos, Itemid, Text) -> \fBwxMenuItem:wxMenuItem()\fR\&
.br
.RS
.LP
Types:

.RS 3
This = \fBwxMenu()\fR\&
.br
Pos = integer()
.br
Itemid = integer()
.br
Text = \fBunicode:chardata()\fR\&
.br
.RE
.RE
.RS
.LP
Equivalent to \fBinsertCheckItem(This, Pos, Itemid, Text, [])\fR\&\&.
.RE
.LP
.B
insertCheckItem(This, Pos, Itemid, Text, Options::[Option]) -> \fBwxMenuItem:wxMenuItem()\fR\&
.br
.RS
.LP
Types:

.RS 3
This = \fBwxMenu()\fR\&
.br
Pos = integer()
.br
Itemid = integer()
.br
Text = \fBunicode:chardata()\fR\&
.br
Option = {help, \fBunicode:chardata()\fR\&}
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
insertRadioItem(This, Pos, Itemid, Text) -> \fBwxMenuItem:wxMenuItem()\fR\&
.br
.RS
.LP
Types:

.RS 3
This = \fBwxMenu()\fR\&
.br
Pos = integer()
.br
Itemid = integer()
.br
Text = \fBunicode:chardata()\fR\&
.br
.RE
.RE
.RS
.LP
Equivalent to \fBinsertRadioItem(This, Pos, Itemid, Text, [])\fR\&\&.
.RE
.LP
.B
insertRadioItem(This, Pos, Itemid, Text, Options::[Option]) -> \fBwxMenuItem:wxMenuItem()\fR\&
.br
.RS
.LP
Types:

.RS 3
This = \fBwxMenu()\fR\&
.br
Pos = integer()
.br
Itemid = integer()
.br
Text = \fBunicode:chardata()\fR\&
.br
Option = {help, \fBunicode:chardata()\fR\&}
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
insertSeparator(This, Pos) -> \fBwxMenuItem:wxMenuItem()\fR\&
.br
.RS
.LP
Types:

.RS 3
This = \fBwxMenu()\fR\&
.br
Pos = integer()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
isChecked(This, Itemid) -> boolean()
.br
.RS
.LP
Types:

.RS 3
This = \fBwxMenu()\fR\&
.br
Itemid = integer()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
isEnabled(This, Itemid) -> boolean()
.br
.RS
.LP
Types:

.RS 3
This = \fBwxMenu()\fR\&
.br
Itemid = integer()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
prepend(This, Itemid) -> \fBwxMenuItem:wxMenuItem()\fR\&
.br
.RS
.LP
Types:

.RS 3
This = \fBwxMenu()\fR\&
.br
Itemid = integer()
.br
.RE
.RE
.RS
.LP
See external documentation\&. 
.br
Also:
.br
prepend(This, Item) -> wxMenuItem:wxMenuItem() when
.br
This::wxMenu(), Item::wxMenuItem:wxMenuItem()\&.
.br

.LP

.br
Kind = ?wxITEM_SEPARATOR | ?wxITEM_NORMAL | ?wxITEM_CHECK | ?wxITEM_RADIO | ?wxITEM_MAX
.RE
.LP
.B
prepend(This, Itemid, Options::[Option]) -> \fBwxMenuItem:wxMenuItem()\fR\&
.br
.RS
.LP
Types:

.RS 3
This = \fBwxMenu()\fR\&
.br
Itemid = integer()
.br
Option = {text, \fBunicode:chardata()\fR\&} | {help, \fBunicode:chardata()\fR\&} | {kind, \fBwx:wx_enum()\fR\&}
.br
.RE
.RE
.RS
.LP
See external documentation\&. 
.br
Kind = ?wxITEM_SEPARATOR | ?wxITEM_NORMAL | ?wxITEM_CHECK | ?wxITEM_RADIO | ?wxITEM_MAX
.RE
.LP
.B
prepend(This, Itemid, Text, Submenu) -> \fBwxMenuItem:wxMenuItem()\fR\&
.br
.RS
.LP
Types:

.RS 3
This = \fBwxMenu()\fR\&
.br
Itemid = integer()
.br
Text = \fBunicode:chardata()\fR\&
.br
Submenu = \fBwxMenu()\fR\&
.br
.RE
.RE
.RS
.LP
Equivalent to \fBprepend(This, Itemid, Text, Submenu, [])\fR\&\&.
.RE
.LP
.B
prepend(This, Itemid, Text, Help, IsCheckable) -> ok
.br
.RS
.LP
Types:

.RS 3
This = \fBwxMenu()\fR\&
.br
Itemid = integer()
.br
Text = \fBunicode:chardata()\fR\&
.br
Help = \fBunicode:chardata()\fR\&
.br
IsCheckable = boolean()
.br
.RE
.RE
.RS
.LP
See external documentation\&. 
.br
Also:
.br
prepend(This, Itemid, Text, Submenu, [Option]) -> wxMenuItem:wxMenuItem() when
.br
This::wxMenu(), Itemid::integer(), Text::unicode:chardata(), Submenu::wxMenu(),
.br
Option :: {\&'help\&', unicode:chardata()}\&.
.br

.RE
.LP
.B
prependCheckItem(This, Itemid, Text) -> \fBwxMenuItem:wxMenuItem()\fR\&
.br
.RS
.LP
Types:

.RS 3
This = \fBwxMenu()\fR\&
.br
Itemid = integer()
.br
Text = \fBunicode:chardata()\fR\&
.br
.RE
.RE
.RS
.LP
Equivalent to \fBprependCheckItem(This, Itemid, Text, [])\fR\&\&.
.RE
.LP
.B
prependCheckItem(This, Itemid, Text, Options::[Option]) -> \fBwxMenuItem:wxMenuItem()\fR\&
.br
.RS
.LP
Types:

.RS 3
This = \fBwxMenu()\fR\&
.br
Itemid = integer()
.br
Text = \fBunicode:chardata()\fR\&
.br
Option = {help, \fBunicode:chardata()\fR\&}
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
prependRadioItem(This, Itemid, Text) -> \fBwxMenuItem:wxMenuItem()\fR\&
.br
.RS
.LP
Types:

.RS 3
This = \fBwxMenu()\fR\&
.br
Itemid = integer()
.br
Text = \fBunicode:chardata()\fR\&
.br
.RE
.RE
.RS
.LP
Equivalent to \fBprependRadioItem(This, Itemid, Text, [])\fR\&\&.
.RE
.LP
.B
prependRadioItem(This, Itemid, Text, Options::[Option]) -> \fBwxMenuItem:wxMenuItem()\fR\&
.br
.RS
.LP
Types:

.RS 3
This = \fBwxMenu()\fR\&
.br
Itemid = integer()
.br
Text = \fBunicode:chardata()\fR\&
.br
Option = {help, \fBunicode:chardata()\fR\&}
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
prependSeparator(This) -> \fBwxMenuItem:wxMenuItem()\fR\&
.br
.RS
.LP
Types:

.RS 3
This = \fBwxMenu()\fR\&
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
remove(This, Itemid) -> \fBwxMenuItem:wxMenuItem()\fR\&
.br
.RS
.LP
Types:

.RS 3
This = \fBwxMenu()\fR\&
.br
Itemid = integer()
.br
.RE
.RE
.RS
.LP
See external documentation\&. 
.br
Also:
.br
remove(This, Item) -> wxMenuItem:wxMenuItem() when
.br
This::wxMenu(), Item::wxMenuItem:wxMenuItem()\&.
.br

.RE
.LP
.B
setHelpString(This, Itemid, HelpString) -> ok
.br
.RS
.LP
Types:

.RS 3
This = \fBwxMenu()\fR\&
.br
Itemid = integer()
.br
HelpString = \fBunicode:chardata()\fR\&
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setLabel(This, Itemid, Label) -> ok
.br
.RS
.LP
Types:

.RS 3
This = \fBwxMenu()\fR\&
.br
Itemid = integer()
.br
Label = \fBunicode:chardata()\fR\&
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setTitle(This, Title) -> ok
.br
.RS
.LP
Types:

.RS 3
This = \fBwxMenu()\fR\&
.br
Title = \fBunicode:chardata()\fR\&
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
destroy(This::\fBwxMenu()\fR\&) -> ok
.br
.RS
.LP
Destroys this object, do not use object again
.RE
.SH AUTHORS
.LP

.I
<>