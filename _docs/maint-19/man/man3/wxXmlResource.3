.TH wxXmlResource 3 "wx 1.8" "" "Erlang Module Definition"
.SH NAME
wxXmlResource \- See external documentation: wxXmlResource.
.SH DESCRIPTION
.LP
See external documentation: wxXmlResource\&.
.SH "DATA TYPES"

.RS 2
.TP 2
.B
wxXmlResource():

.RS 2
.LP
An object reference, The representation is internal and can be changed without notice\&. It can\&'t be used for comparsion stored on disc or distributed for use on other nodes\&.
.RE
.RE
.SH EXPORTS
.LP
.B
new() -> \fBwxXmlResource()\fR\&
.br
.RS
.LP
Equivalent to \fBnew([])\fR\&\&.
.RE
.LP
.B
new(Options::[Option]) -> \fBwxXmlResource()\fR\&
.br
.RS
.LP
Types:

.RS 3
Option = {flags, integer()} | {domain, \fBunicode:chardata()\fR\&}
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
new(Filemask, Options::[Option]) -> \fBwxXmlResource()\fR\&
.br
.RS
.LP
Types:

.RS 3
Filemask = \fBunicode:chardata()\fR\&
.br
Option = {flags, integer()} | {domain, \fBunicode:chardata()\fR\&}
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
attachUnknownControl(This, Name, Control) -> boolean()
.br
.RS
.LP
Types:

.RS 3
This = \fBwxXmlResource()\fR\&
.br
Name = \fBunicode:chardata()\fR\&
.br
Control = \fBwxWindow:wxWindow()\fR\&
.br
.RE
.RE
.RS
.LP
Equivalent to \fBattachUnknownControl(This, Name, Control, [])\fR\&\&.
.RE
.LP
.B
attachUnknownControl(This, Name, Control, Options::[Option]) -> boolean()
.br
.RS
.LP
Types:

.RS 3
This = \fBwxXmlResource()\fR\&
.br
Name = \fBunicode:chardata()\fR\&
.br
Control = \fBwxWindow:wxWindow()\fR\&
.br
Option = {parent, \fBwxWindow:wxWindow()\fR\&}
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
clearHandlers(This) -> ok
.br
.RS
.LP
Types:

.RS 3
This = \fBwxXmlResource()\fR\&
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
compareVersion(This, Major, Minor, Release, Revision) -> integer()
.br
.RS
.LP
Types:

.RS 3
This = \fBwxXmlResource()\fR\&
.br
Major = integer()
.br
Minor = integer()
.br
Release = integer()
.br
Revision = integer()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
get() -> \fBwxXmlResource()\fR\&
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getFlags(This) -> integer()
.br
.RS
.LP
Types:

.RS 3
This = \fBwxXmlResource()\fR\&
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getVersion(This) -> integer()
.br
.RS
.LP
Types:

.RS 3
This = \fBwxXmlResource()\fR\&
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getXRCID(Str_id) -> integer()
.br
.RS
.LP
Types:

.RS 3
Str_id = [\fBunicode:chardata()\fR\&]
.br
.RE
.RE
.RS
.LP
Equivalent to \fBgetXRCID(Str_id, [])\fR\&\&.
.RE
.LP
.B
getXRCID(Str_id, Options::[Option]) -> integer()
.br
.RS
.LP
Types:

.RS 3
Str_id = [\fBunicode:chardata()\fR\&]
.br
Option = {value_if_not_found, integer()}
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
initAllHandlers(This) -> ok
.br
.RS
.LP
Types:

.RS 3
This = \fBwxXmlResource()\fR\&
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
load(This, Filemask) -> boolean()
.br
.RS
.LP
Types:

.RS 3
This = \fBwxXmlResource()\fR\&
.br
Filemask = \fBunicode:chardata()\fR\&
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
loadBitmap(This, Name) -> \fBwxBitmap:wxBitmap()\fR\&
.br
.RS
.LP
Types:

.RS 3
This = \fBwxXmlResource()\fR\&
.br
Name = \fBunicode:chardata()\fR\&
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
loadDialog(This, Parent, Name) -> \fBwxDialog:wxDialog()\fR\&
.br
.RS
.LP
Types:

.RS 3
This = \fBwxXmlResource()\fR\&
.br
Parent = \fBwxWindow:wxWindow()\fR\&
.br
Name = \fBunicode:chardata()\fR\&
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
loadDialog(This, Dlg, Parent, Name) -> boolean()
.br
.RS
.LP
Types:

.RS 3
This = \fBwxXmlResource()\fR\&
.br
Dlg = \fBwxDialog:wxDialog()\fR\&
.br
Parent = \fBwxWindow:wxWindow()\fR\&
.br
Name = \fBunicode:chardata()\fR\&
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
loadFrame(This, Parent, Name) -> \fBwxFrame:wxFrame()\fR\&
.br
.RS
.LP
Types:

.RS 3
This = \fBwxXmlResource()\fR\&
.br
Parent = \fBwxWindow:wxWindow()\fR\&
.br
Name = \fBunicode:chardata()\fR\&
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
loadFrame(This, Frame, Parent, Name) -> boolean()
.br
.RS
.LP
Types:

.RS 3
This = \fBwxXmlResource()\fR\&
.br
Frame = \fBwxFrame:wxFrame()\fR\&
.br
Parent = \fBwxWindow:wxWindow()\fR\&
.br
Name = \fBunicode:chardata()\fR\&
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
loadIcon(This, Name) -> \fBwxIcon:wxIcon()\fR\&
.br
.RS
.LP
Types:

.RS 3
This = \fBwxXmlResource()\fR\&
.br
Name = \fBunicode:chardata()\fR\&
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
loadMenu(This, Name) -> \fBwxMenu:wxMenu()\fR\&
.br
.RS
.LP
Types:

.RS 3
This = \fBwxXmlResource()\fR\&
.br
Name = \fBunicode:chardata()\fR\&
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
loadMenuBar(This, Name) -> \fBwxMenuBar:wxMenuBar()\fR\&
.br
.RS
.LP
Types:

.RS 3
This = \fBwxXmlResource()\fR\&
.br
Name = \fBunicode:chardata()\fR\&
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
loadMenuBar(This, Parent, Name) -> \fBwxMenuBar:wxMenuBar()\fR\&
.br
.RS
.LP
Types:

.RS 3
This = \fBwxXmlResource()\fR\&
.br
Parent = \fBwxWindow:wxWindow()\fR\&
.br
Name = \fBunicode:chardata()\fR\&
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
loadPanel(This, Parent, Name) -> \fBwxPanel:wxPanel()\fR\&
.br
.RS
.LP
Types:

.RS 3
This = \fBwxXmlResource()\fR\&
.br
Parent = \fBwxWindow:wxWindow()\fR\&
.br
Name = \fBunicode:chardata()\fR\&
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
loadPanel(This, Panel, Parent, Name) -> boolean()
.br
.RS
.LP
Types:

.RS 3
This = \fBwxXmlResource()\fR\&
.br
Panel = \fBwxPanel:wxPanel()\fR\&
.br
Parent = \fBwxWindow:wxWindow()\fR\&
.br
Name = \fBunicode:chardata()\fR\&
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
loadToolBar(This, Parent, Name) -> \fBwxToolBar:wxToolBar()\fR\&
.br
.RS
.LP
Types:

.RS 3
This = \fBwxXmlResource()\fR\&
.br
Parent = \fBwxWindow:wxWindow()\fR\&
.br
Name = \fBunicode:chardata()\fR\&
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
set(Res) -> \fBwxXmlResource()\fR\&
.br
.RS
.LP
Types:

.RS 3
Res = \fBwxXmlResource()\fR\&
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setFlags(This, Flags) -> ok
.br
.RS
.LP
Types:

.RS 3
This = \fBwxXmlResource()\fR\&
.br
Flags = integer()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
unload(This, Filename) -> boolean()
.br
.RS
.LP
Types:

.RS 3
This = \fBwxXmlResource()\fR\&
.br
Filename = \fBunicode:chardata()\fR\&
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
xrcctrl(Window, Name, Type) -> \fBwx:wx_object()\fR\&
.br
.RS
.LP
Types:

.RS 3
Window = \fBwxWindow:wxWindow()\fR\&
.br
Name = string()
.br
Type = atom()
.br
.RE
.RE
.RS
.LP
Looks up a control with Name in a window created with XML resources\&. You can use it to set/get values from controls\&. The object is type casted to \fIType\fR\&\&. Example: 
.br
Xrc = wxXmlResource:get(), 
.br
Dlg = wxDialog:new(), 
.br
true = wxXmlResource:loadDialog(Xrc, Dlg, Frame, "controls_dialog"), 
.br
LCtrl = xrcctrl(Dlg, "controls_listctrl", wxListCtrl), 
.br
wxListCtrl:insertColumn(LCtrl, 0, "Name", [{width, 200}]), 
.br

.RE
.LP
.B
destroy(This::\fBwxXmlResource()\fR\&) -> ok
.br
.RS
.LP
Destroys this object, do not use object again
.RE
.SH AUTHORS
.LP

.I
<>