.TH egd 3 "percept 0.9" "" "Erlang Module Definition"
.SH NAME
egd \- egd - erlang graphical drawer.
.SH DESCRIPTION
.LP
egd - erlang graphical drawer
.SH "DATA TYPES"

.RS 2
.TP 2
.B
color():

.TP 2
.B
egd_image():

.TP 2
.B
font():

.TP 2
.B
point() = {integer(), integer()}:

.TP 2
.B
render_option() = {render_engine, opaque} | {render_engine, alpha}:

.RE
.SH EXPORTS
.LP
.B
color(Color::Value | Name) -> \fBcolor()\fR\&
.br
.RS
.LP
Types:

.RS 3
Value = {byte(), byte(), byte()} | {byte(), byte(), byte(), byte()}
.br
Name = black | silver | gray | white | maroon | red | purple | fuchia | green | lime | olive | yellow | navy | blue | teal | aqua
.br
.RE
.RE
.RS
.LP
Creates a color reference\&.
.RE
.LP
.B
create(Width::integer(), Height::integer()) -> \fBegd_image()\fR\&
.br
.RS
.LP
Creates an image area and returns its reference\&.
.RE
.LP
.B
destroy(Image::\fBegd_image()\fR\&) -> ok
.br
.RS
.LP
Destroys the image\&.
.RE
.LP
.B
filledEllipse(Image::\fBegd_image()\fR\&, P1::\fBpoint()\fR\&, P2::\fBpoint()\fR\&, Color::\fBcolor()\fR\&) -> ok
.br
.RS
.LP
Creates a filled ellipse object\&.
.RE
.LP
.B
filledRectangle(Image::\fBegd_image()\fR\&, P1::\fBpoint()\fR\&, P2::\fBpoint()\fR\&, Color::\fBcolor()\fR\&) -> ok
.br
.RS
.LP
Creates a filled rectangle object\&.
.RE
.LP
.B
line(Image::\fBegd_image()\fR\&, P1::\fBpoint()\fR\&, P2::\fBpoint()\fR\&, Color::\fBcolor()\fR\&) -> ok
.br
.RS
.LP
Creates a line object from P1 to P2 in the image\&.
.RE
.LP
.B
rectangle(Image::\fBegd_image()\fR\&, P1::\fBpoint()\fR\&, P2::\fBpoint()\fR\&, Color::\fBcolor()\fR\&) -> ok
.br
.RS
.LP
Creates a rectangle object\&.
.RE
.LP
.B
render(Image::\fBegd_image()\fR\&) -> binary()
.br
.RS
.LP
Equivalent to \fBrender(Image, png, [{render_engine, opaque}])\fR\&\&.
.RE
.LP
.B
render(Image::\fBegd_image()\fR\&, Type::png | raw_bitmap) -> binary()
.br
.RS
.LP
Equivalent to \fBrender(Image, Type, [{render_engine, opaque}])\fR\&\&.
.RE
.LP
.B
render(Image::\fBegd_image()\fR\&, Type::png | raw_bitmap, Options::[\fBrender_option()\fR\&]) -> binary()
.br
.RS
.LP
Renders a binary from the primitives specified by egd_image()\&. The binary can either be a raw bitmap with rgb tripplets or a binary in png format\&.
.RE
.LP
.B
save(Binary::binary(), Filename::string()) -> ok
.br
.RS
.LP
Saves the binary to file\&.
.RE
.LP
.B
text(Image::\fBegd_image()\fR\&, P::\fBpoint()\fR\&, Font::\fBfont()\fR\&, Text::string(), Color::\fBcolor()\fR\&) -> ok
.br
.RS
.LP
Creates a text object\&.
.RE
.SH AUTHORS
.LP

.I
<>