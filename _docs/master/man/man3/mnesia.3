.TH mnesia 3 "mnesia 4.15.3" "Ericsson AB" "Erlang Module Definition"
.SH NAME
mnesia \- A distributed telecommunications DBMS
.SH DESCRIPTION
.LP
The following are some of the most important and attractive capabilities provided by Mnesia:
.RS 2
.TP 2
*
A relational/object hybrid data model that is suitable for telecommunications applications\&. 
.LP
.TP 2
*
A DBMS query language, Query List Comprehension (QLC) as an add-on library\&. 
.LP
.TP 2
*
Persistence\&. Tables can be coherently kept on disc and in the main memory\&. 
.LP
.TP 2
*
Replication\&. Tables can be replicated at several nodes\&. 
.LP
.TP 2
*
Atomic transactions\&. A series of table manipulation operations can be grouped into a single atomic transaction\&. 
.LP
.TP 2
*
Location transparency\&. Programs can be written without knowledge of the actual data location\&. 
.LP
.TP 2
*
Extremely fast real-time data searches\&. 
.LP
.TP 2
*
Schema manipulation routines\&. The DBMS can be reconfigured at runtime without stopping the system\&. 
.LP
.RE

.LP
This Reference Manual describes the Mnesia API\&. This includes functions that define and manipulate Mnesia tables\&.
.LP
All functions in this Reference Manual can be used in any combination with queries using the list comprehension notation\&. For information about the query notation, see the \fBqlc\fR\& manual page in STDLIB\&.
.LP
Data in Mnesia is organized as a set of tables\&. Each table has a name that must be an atom\&. Each table is made up of Erlang records\&. The user is responsible for the record definitions\&. Each table also has a set of properties\&. The following are some of the properties that are associated with each table:
.RS 2
.TP 2
*
\fItype\fR\&\&. Each table can have \fIset\fR\&, \fIordered_set\fR\&, or \fIbag\fR\& semantics\&. Notice that currently \fIordered_set\fR\& is not supported for \fIdisc_only_copies\fR\&\&.
.RS 2
.LP
If a table is of type \fIset\fR\&, each key leads to either one or zero records\&.
.RE
.RS 2
.LP
If a new item is inserted with the same key as an existing record, the old record is overwritten\&. However, if a table is of type \fIbag\fR\&, each key can map to several records\&. All records in type \fIbag\fR\& tables are unique, only the keys can be duplicated\&.
.RE
.LP
.TP 2
*
\fIrecord_name\fR\&\&. All records stored in a table must have the same name\&. The records must be instances of the same record type\&.
.LP
.TP 2
*
\fIram_copies\fR\&\&. A table can be replicated on a number of Erlang nodes\&. Property \fIram_copies\fR\& specifies a list of Erlang nodes where RAM copies are kept\&. These copies can be dumped to disc at regular intervals\&. However, updates to these copies are not written to disc on a transaction basis\&.
.LP
.TP 2
*
\fIdisc_copies\fR\&\&. This property specifies a list of Erlang nodes where the table is kept in RAM and on disc\&. All updates of the table are performed in the actual table and are also logged to disc\&. If a table is of type \fIdisc_copies\fR\& at a certain node, the entire table is resident in RAM memory and on disc\&. Each transaction performed on the table is appended to a \fILOG\fR\& file and written into the RAM table\&.
.LP
.TP 2
*
\fIdisc_only_copies\fR\&\&. Some, or all, table replicas can be kept on disc only\&. These replicas are considerably slower than the RAM-based replicas\&.
.LP
.TP 2
*
\fIindex\fR\&\&. This is a list of attribute names, or integers, which specify the tuple positions on which Mnesia is to build and maintain an extra index table\&.
.LP
.TP 2
*
\fIlocal_content\fR\&\&. When an application requires tables whose contents are local to each node, \fIlocal_content\fR\& tables can be used\&. The table name is known to all Mnesia nodes, but its content is unique on each node\&. This means that access to such a table must be done locally\&. Set field \fIlocal_content\fR\& to \fItrue\fR\& to enable the \fIlocal_content\fR\& behavior\&. Default is \fIfalse\fR\&\&.
.LP
.TP 2
*
\fImajority\fR\&\&. This attribute is \fItrue\fR\& or \fIfalse\fR\&; default is \fIfalse\fR\&\&. When \fItrue\fR\&, a majority of the table replicas must be available for an update to succeed\&. Majority checking can be enabled on tables with mission-critical data, where it is vital to avoid inconsistencies because of network splits\&.
.LP
.TP 2
*
\fIsnmp\fR\&\&. Each (set-based) Mnesia table can be automatically turned into a Simple Network Management Protocol (SNMP) ordered table as well\&. This property specifies the types of the SNMP keys\&.
.LP
.TP 2
*
\fIattributes\fR\&\&. The names of the attributes for the records that are inserted in the table\&.
.LP
.RE

.LP
For information about the complete set of table properties and their details, see \fImnesia:create_table/2\fR\&\&.
.LP
This Reference Manual uses a table of persons to illustrate various examples\&. The following record definition is assumed:
.LP
.nf

-record(person, {name,
                 age = 0,
                 address = unknown,
                 salary = 0,
                 children = []}),
.fi
.LP
The first record attribute is the primary key, or key for short\&.
.LP
The function descriptions are sorted in alphabetical order\&. It is recommended to start to read about \fImnesia:create_table/2\fR\&, \fImnesia:lock/2\fR\&, and \fImnesia:activity/4\fR\& before you continue and learn about the rest\&.
.LP
Writing or deleting in transaction-context creates a local copy of each modified record during the transaction\&. During iteration, that is, \fImnesia:fold[lr]/4\fR\&, \fImnesia:next/2\fR\&, \fImnesia:prev/2\fR\&, and \fImnesia:snmp_get_next_index/2\fR\&, Mnesia compensates for every written or deleted record, which can reduce the performance\&.
.LP
If possible, avoid writing or deleting records in the same transaction before iterating over the table\&.
.SH EXPORTS
.LP
.B
abort(Reason) -> transaction abort
.br
.RS
.LP
Makes the transaction silently return the tuple \fI{aborted, Reason}\fR\&\&. Termination of a Mnesia transaction means that an exception is thrown to an enclosing \fIcatch\fR\&\&. Thus, the expression \fIcatch mnesia:abort(x)\fR\& does not terminate the transaction\&.
.RE
.LP
.B
activate_checkpoint(Args) -> {ok,Name,Nodes} | {error,Reason}
.br
.RS
.LP
A checkpoint is a consistent view of the system\&. A checkpoint can be activated on a set of tables\&. This checkpoint can then be traversed and presents a view of the system as it existed at the time when the checkpoint was activated, even if the tables are being or have been manipulated\&.
.LP
\fIArgs\fR\& is a list of the following tuples:
.RS 2
.TP 2
*
\fI{name,Name}\fR\&\&. \fIName\fR\& is the checkpoint name\&. Each checkpoint must have a name that is unique to the associated nodes\&. The name can be reused only once the checkpoint has been deactivated\&. By default, a name that is probably unique is generated\&.
.LP
.TP 2
*
\fI{max,MaxTabs}\fR\&\&. \fIMaxTabs\fR\& is a list of tables that are to be included in the checkpoint\&. Default is \fI[]\fR\&\&. For these tables, the redundancy is maximized and checkpoint information is retained together with all replicas\&. The checkpoint becomes more fault tolerant if the tables have several replicas\&. When a new replica is added by the schema manipulation function \fImnesia:add_table_copy/3\fR\&, a retainer is also attached automatically\&.
.LP
.TP 2
*
\fI{min,MinTabs}\fR\&\&. \fIMinTabs\fR\& is a list of tables that are to be included in the checkpoint\&. Default is []\&. For these tables, the redundancy is minimized and the checkpoint information is only retained with one replica, preferably on the local node\&.
.LP
.TP 2
*
\fI{allow_remote,Bool}\fR\&\&. \fIfalse\fR\& means that all retainers must be local\&. The checkpoint cannot be activated if a table does not reside locally\&. \fItrue\fR\& allows retainers to be allocated on any node\&. Default is \fItrue\fR\&\&.
.LP
.TP 2
*
\fI{ram_overrides_dump,Bool}\fR\&\&. Only applicable for \fIram_copies\fR\&\&. \fIBool\fR\& allows you to choose to back up the table state as it is in RAM, or as it is on disc\&. \fItrue\fR\& means that the latest committed records in RAM are to be included in the checkpoint\&. These are the records that the application accesses\&. \fIfalse\fR\& means that the records dumped to \fIDAT\fR\& files are to be included in the checkpoint\&. These records are loaded at startup\&. Default is \fIfalse\fR\&\&.
.LP
.RE

.LP
Returns \fI{ok,Name,Nodes}\fR\& or \fI{error,Reason}\fR\&\&. \fIName\fR\& is the (possibly generated) checkpoint name\&. \fINodes\fR\& are the nodes that are involved in the checkpoint\&. Only nodes that keep a checkpoint retainer know about the checkpoint\&.
.RE
.LP
.B
activity(AccessContext, Fun [, Args]) -> ResultOfFun | exit(Reason)
.br
.RS
.LP
Calls \fImnesia:activity(AccessContext, Fun, Args, AccessMod)\fR\&, where \fIAccessMod\fR\& is the default access callback module obtained by \fImnesia:system_info(access_module)\fR\&\&. \fIArgs\fR\& defaults to \fI[]\fR\& (empty list)\&.
.RE
.LP
.B
activity(AccessContext, Fun, Args, AccessMod) -> ResultOfFun | exit(Reason)
.br
.RS
.LP
Executes the functional object \fIFun\fR\& with argument \fIArgs\fR\&\&.
.LP
The code that executes inside the activity can consist of a series of table manipulation functions, which are performed in an \fIAccessContext\fR\&\&. Currently, the following access contexts are supported:
.RS 2
.TP 2
.B
\fItransaction\fR\&:
Short for \fI{transaction, infinity}\fR\&
.TP 2
.B
\fI{transaction, Retries}\fR\&:
Calls \fImnesia:transaction(Fun, Args, Retries)\fR\&\&. Notice that the result from \fIFun\fR\& is returned if the transaction is successful (atomic), otherwise the function exits with an abort reason\&.
.TP 2
.B
\fIsync_transaction\fR\&:
Short for \fI{sync_transaction, infinity}\fR\&
.TP 2
.B
\fI{sync_transaction, Retries}\fR\&:
Calls \fImnesia:sync_transaction(Fun, Args, Retries)\fR\&\&. Notice that the result from \fIFun\fR\& is returned if the transaction is successful (atomic), otherwise the function exits with an abort reason\&.
.TP 2
.B
\fIasync_dirty\fR\&:
Calls \fImnesia:async_dirty(Fun, Args)\fR\&\&.
.TP 2
.B
\fIsync_dirty\fR\&:
Calls \fImnesia:sync_dirty(Fun, Args)\fR\&\&.
.TP 2
.B
\fIets\fR\&:
Calls \fImnesia:ets(Fun, Args)\fR\&\&.
.RE
.LP
This function (\fImnesia:activity/4\fR\&) differs in an important way from the functions \fImnesia:transaction\fR\&, \fImnesia:sync_transaction\fR\&, \fImnesia:async_dirty\fR\&, \fImnesia:sync_dirty\fR\&, and \fImnesia:ets\fR\&\&. Argument \fIAccessMod\fR\& is the name of a callback module, which implements the \fImnesia_access\fR\& behavior\&.
.LP
Mnesia forwards calls to the following functions:
.RS 2
.TP 2
*
mnesia:lock/2 (read_lock_table/1, write_lock_table/1) 
.LP
.TP 2
*
mnesia:write/3 (write/1, s_write/1) 
.LP
.TP 2
*
mnesia:delete/3 (delete/1, s_delete/1) 
.LP
.TP 2
*
mnesia:delete_object/3 (delete_object/1, s_delete_object/1) 
.LP
.TP 2
*
mnesia:read/3 (read/1, wread/1) 
.LP
.TP 2
*
mnesia:match_object/3 (match_object/1) 
.LP
.TP 2
*
mnesia:all_keys/1 
.LP
.TP 2
*
mnesia:first/1 
.LP
.TP 2
*
mnesia:last/1 
.LP
.TP 2
*
mnesia:prev/2 
.LP
.TP 2
*
mnesia:next/2 
.LP
.TP 2
*
mnesia:index_match_object/4 (index_match_object/2) 
.LP
.TP 2
*
mnesia:index_read/3 
.LP
.TP 2
*
mnesia:table_info/2 
.LP
.RE

.LP
to the corresponding:
.RS 2
.TP 2
*
AccessMod:lock(ActivityId, Opaque, LockItem, LockKind) 
.LP
.TP 2
*
AccessMod:write(ActivityId, Opaque, Tab, Rec, LockKind) 
.LP
.TP 2
*
AccessMod:delete(ActivityId, Opaque, Tab, Key, LockKind) 
.LP
.TP 2
*
AccessMod:delete_object(ActivityId, Opaque, Tab, RecXS, LockKind) 
.LP
.TP 2
*
AccessMod:read(ActivityId, Opaque, Tab, Key, LockKind) 
.LP
.TP 2
*
AccessMod:match_object(ActivityId, Opaque, Tab, Pattern, LockKind) 
.LP
.TP 2
*
AccessMod:all_keys(ActivityId, Opaque, Tab, LockKind) 
.LP
.TP 2
*
AccessMod:first(ActivityId, Opaque, Tab) 
.LP
.TP 2
*
AccessMod:last(ActivityId, Opaque, Tab) 
.LP
.TP 2
*
AccessMod:prev(ActivityId, Opaque, Tab, Key) 
.LP
.TP 2
*
AccessMod:next(ActivityId, Opaque, Tab, Key) 
.LP
.TP 2
*
AccessMod:index_match_object(ActivityId, Opaque, Tab, Pattern, Attr, LockKind) 
.LP
.TP 2
*
AccessMod:index_read(ActivityId, Opaque, Tab, SecondaryKey, Attr, LockKind) 
.LP
.TP 2
*
AccessMod:table_info(ActivityId, Opaque, Tab, InfoItem) 
.LP
.RE

.LP
\fIActivityId\fR\& is a record that represents the identity of the enclosing Mnesia activity\&. The first field (obtained with \fIelement(1, ActivityId)\fR\&) contains an atom, which can be interpreted as the activity type: \fIets\fR\&, \fIasync_dirty\fR\&, \fIsync_dirty\fR\&, or \fItid\fR\&\&. \fItid\fR\& means that the activity is a transaction\&. The structure of the rest of the identity record is internal to Mnesia\&.
.LP
\fIOpaque\fR\& is an opaque data structure that is internal to Mnesia\&.
.RE
.LP
.B
add_table_copy(Tab, Node, Type) -> {aborted, R} | {atomic, ok}
.br
.RS
.LP
Makes another copy of a table at the node \fINode\fR\&\&. Argument \fIType\fR\& must be either of the atoms \fIram_copies\fR\&, \fIdisc_copies\fR\&, or \fIdisc_only_copies\fR\&\&. For example, the following call ensures that a disc replica of the \fIperson\fR\& table also exists at node \fINode\fR\&:
.LP
.nf

mnesia:add_table_copy(person, Node, disc_copies)
.fi
.LP
This function can also be used to add a replica of the table named \fIschema\fR\&\&.
.RE
.LP
.B
add_table_index(Tab, AttrName) -> {aborted, R} | {atomic, ok}
.br
.RS
.LP
Table indexes can be used whenever the user wants to use frequently some other field than the key field to look up records\&. If this other field has an associated index, these lookups can occur in constant time and space\&. For example, if your application wishes to use field \fIage\fR\& to find efficiently all persons with a specific age, it can be a good idea to have an index on field \fIage\fR\&\&. This can be done with the following call:
.LP
.nf

mnesia:add_table_index(person, age)
.fi
.LP
Indexes do not come for free\&. They occupy space that is proportional to the table size, and they cause insertions into the table to execute slightly slower\&.
.RE
.LP
.B
all_keys(Tab) -> KeyList | transaction abort
.br
.RS
.LP
Returns a list of all keys in the table named \fITab\fR\&\&. The semantics of this function is context-sensitive\&. For more information, see \fImnesia:activity/4\fR\&\&. In transaction-context, it acquires a read lock on the entire table\&.
.RE
.LP
.B
async_dirty(Fun, [, Args]) -> ResultOfFun | exit(Reason)
.br
.RS
.LP
Calls the \fIFun\fR\& in a context that is not protected by a transaction\&. The Mnesia function calls performed in the \fIFun\fR\& are mapped to the corresponding dirty functions\&. This still involves logging, replication, and subscriptions, but there is no locking, local transaction storage, or commit protocols involved\&. Checkpoint retainers and indexes are updated, but they are updated dirty\&. As for normal \fImnesia:dirty_*\fR\& operations, the operations are performed semi-asynchronously\&. For details, see \fImnesia:activity/4\fR\& and the User\&'s Guide\&.
.LP
The Mnesia tables can be manipulated without using transactions\&. This has some serious disadvantages, but is considerably faster, as the transaction manager is not involved and no locks are set\&. A dirty operation does, however, guarantee a certain level of consistency, and the dirty operations cannot return garbled records\&. All dirty operations provide location transparency to the programmer, and a program does not have to be aware of the whereabouts of a certain table to function\&.
.LP
Notice that it is more than ten times more efficient to read records dirty than within a transaction\&.
.LP
Depending on the application, it can be a good idea to use the dirty functions for certain operations\&. Almost all Mnesia functions that can be called within transactions have a dirty equivalent, which is much more efficient\&.
.LP
However, notice that there is a risk that the database can be left in an inconsistent state if dirty operations are used to update it\&. Dirty operations are only to be used for performance reasons when it is absolutely necessary\&.
.LP
Notice that calling (nesting) \fImnesia:[a]sync_dirty\fR\& inside a transaction-context inherits the transaction semantics\&.
.RE
.LP
.B
backup(Opaque [, BackupMod]) -> ok | {error,Reason}
.br
.RS
.LP
Activates a new checkpoint covering all Mnesia tables, including the schema, with maximum degree of redundancy, and performs a backup using \fIbackup_checkpoint/2/3\fR\&\&. The default value of the backup callback module \fIBackupMod\fR\& is obtained by \fImnesia:system_info(backup_module)\fR\&\&.
.RE
.LP
.B
backup_checkpoint(Name, Opaque [, BackupMod]) -> ok | {error,Reason}
.br
.RS
.LP
The tables are backed up to external media using backup module \fIBackupMod\fR\&\&. Tables with the local contents property are backed up as they exist on the current node\&. \fIBackupMod\fR\& is the default backup callback module obtained by \fImnesia:system_info(backup_module)\fR\&\&. For information about the exact callback interface (the \fImnesia_backup behavior\fR\&), see the User\&'s Guide\&.
.RE
.LP
.B
change_config(Config, Value) -> {error, Reason} | {ok, ReturnValue}
.br
.RS
.LP
\fIConfig\fR\& is to be an atom of the following configuration parameters:
.RS 2
.TP 2
.B
\fIextra_db_nodes\fR\&:
\fIValue\fR\& is a list of nodes that Mnesia is to try to connect to\&. \fIReturnValue\fR\& is those nodes in \fIValue\fR\& that Mnesia is connected to\&.
.RS 2
.LP
Notice that this function must only be used to connect to newly started RAM nodes (N\&.D\&.R\&.S\&.N\&.) with an empty schema\&. If, for example, this function is used after the network has been partitioned, it can lead to inconsistent tables\&.
.RE
.RS 2
.LP
Notice that Mnesia can be connected to other nodes than those returned in \fIReturnValue\fR\&\&.
.RE
.TP 2
.B
\fIdc_dump_limit\fR\&:
\fIValue\fR\& is a number\&. See the description in \fBSection Configuration Parameters\fR\&\&. \fIReturnValue\fR\& is the new value\&. Notice that this configuration parameter is not persistent\&. It is lost when Mnesia has stopped\&.
.RE
.RE
.LP
.B
change_table_access_mode(Tab, AccessMode) -> {aborted, R} | {atomic, ok}
.br
.RS
.LP
\fIAcccessMode\fR\& is by default the atom \fIread_write\fR\& but it can also be set to the atom \fIread_only\fR\&\&. If \fIAccessMode\fR\& is set to \fIread_only\fR\&, updates to the table cannot be performed\&. At startup, Mnesia always loads \fIread_only\fR\& tables locally regardless of when and if Mnesia is terminated on other nodes\&.
.RE
.LP
.B
change_table_copy_type(Tab, Node, To) -> {aborted, R} | {atomic, ok}
.br
.RS
.LP
For example:
.LP
.nf

mnesia:change_table_copy_type(person, node(), disc_copies)
.fi
.LP
Transforms the \fIperson\fR\& table from a RAM table into a disc-based table at \fINode\fR\&\&.
.LP
This function can also be used to change the storage type of the table named \fIschema\fR\&\&. The schema table can only have \fIram_copies\fR\& or \fIdisc_copies\fR\& as the storage type\&. If the storage type of the schema is \fIram_copies\fR\&, no other table can be disc-resident on that node\&.
.RE
.LP
.B
change_table_load_order(Tab, LoadOrder) -> {aborted, R} | {atomic, ok}
.br
.RS
.LP
The \fILoadOrder\fR\& priority is by default \fI0\fR\& (zero) but can be set to any integer\&. The tables with the highest \fILoadOrder\fR\& priority are loaded first at startup\&.
.RE
.LP
.B
change_table_majority(Tab, Majority) -> {aborted, R} | {atomic, ok}
.br
.RS
.LP
\fIMajority\fR\& must be a boolean\&. Default is \fIfalse\fR\&\&. When \fItrue\fR\&, a majority of the table replicas must be available for an update to succeed\&. When used on fragmented tables, \fITab\fR\& must be the base table name\&. Directly changing the majority setting on individual fragments is not allowed\&.
.RE
.LP
.B
clear_table(Tab) -> {aborted, R} | {atomic, ok}
.br
.RS
.LP
Deletes all entries in the table \fITab\fR\&\&.
.RE
.LP
.B
create_schema(DiscNodes) -> ok | {error,Reason}
.br
.RS
.LP
Creates a new database on disc\&. Various files are created in the local Mnesia directory of each node\&. Notice that the directory must be unique for each node\&. Two nodes must never share the same directory\&. If possible, use a local disc device to improve performance\&.
.LP
\fImnesia:create_schema/1\fR\& fails if any of the Erlang nodes given as \fIDiscNodes\fR\& are not alive, if Mnesia is running on any of the nodes, or if any of the nodes already have a schema\&. Use \fImnesia:delete_schema/1\fR\& to get rid of old faulty schemas\&.
.LP
Notice that only nodes with disc are to be included in \fIDiscNodes\fR\&\&. Disc-less nodes, that is, nodes where all tables including the schema only resides in RAM, must not be included\&.
.RE
.LP
.B
create_table(Name, TabDef) -> {atomic, ok} | {aborted, Reason}
.br
.RS
.LP
Creates a Mnesia table called \fIName\fR\& according to argument \fITabDef\fR\&\&. This list must be a list of \fI{Item, Value}\fR\& tuples, where the following values are allowed:
.RS 2
.TP 2
*
\fI{access_mode, Atom}\fR\&\&. The access mode is by default the atom \fIread_write\fR\& but it can also be set to the atom \fIread_only\fR\&\&. If \fIAccessMode\fR\& is set to \fIread_only\fR\&, updates to the table cannot be performed\&.
.RS 2
.LP
At startup, Mnesia always loads \fIread_only\fR\& table locally regardless of when and if Mnesia is terminated on other nodes\&. This argument returns the access mode of the table\&. The access mode can be \fIread_only\fR\& or \fIread_write\fR\&\&.
.RE
.LP
.TP 2
*
\fI{attributes, AtomList}\fR\& is a list of the attribute names for the records that are supposed to populate the table\&. Default is \fI[key, val]\fR\&\&. The table must at least have one extra attribute in addition to the key\&.
.RS 2
.LP
When accessing single attributes in a record, it is not necessary, or even recommended, to hard code any attribute names as atoms\&. Use construct \fIrecord_info(fields, RecordName)\fR\& instead\&. It can be used for records of type \fIRecordName\fR\&\&.
.RE
.LP
.TP 2
*
\fI{disc_copies, Nodelist}\fR\&, where \fINodelist\fR\& is a list of the nodes where this table is supposed to have disc copies\&. If a table replica is of type \fIdisc_copies\fR\&, all write operations on this particular replica of the table are written to disc and to the RAM copy of the table\&.
.RS 2
.LP
It is possible to have a replicated table of type \fIdisc_copies\fR\& on one node and another type on another node\&. Default is \fI[]\fR\&\&.
.RE
.LP
.TP 2
*
\fI{disc_only_copies, Nodelist}\fR\&, where \fINodelist\fR\& is a list of the nodes where this table is supposed to have \fIdisc_only_copies\fR\&\&. A disc only table replica is kept on disc only and unlike the other replica types, the contents of the replica do not reside in RAM\&. These replicas are considerably slower than replicas held in RAM\&.
.LP
.TP 2
*
\fI{index, Intlist}\fR\&, where \fIIntlist\fR\& is a list of attribute names (atoms) or record fields for which Mnesia is to build and maintain an extra index table\&. The \fIqlc\fR\& query compiler \fImay\fR\& be able to optimize queries if there are indexes available\&.
.LP
.TP 2
*
\fI{load_order, Integer}\fR\&\&. The load order priority is by default \fI0\fR\& (zero) but can be set to any integer\&. The tables with the highest load order priority are loaded first at startup\&.
.LP
.TP 2
*
\fI{majority, Flag}\fR\&, where \fIFlag\fR\& must be a boolean\&. If \fItrue\fR\&, any (non-dirty) update to the table is aborted, unless a majority of the table replicas are available for the commit\&. When used on a fragmented table, all fragments are given the same the same majority setting\&.
.LP
.TP 2
*
\fI{ram_copies, Nodelist}\fR\&, where \fINodelist\fR\& is a list of the nodes where this table is supposed to have RAM copies\&. A table replica of type \fIram_copies\fR\& is not written to disc on a per transaction basis\&. \fIram_copies\fR\& replicas can be dumped to disc with the function \fImnesia:dump_tables(Tabs)\fR\&\&. Default value for this attribute is \fI[node()]\fR\&\&.
.LP
.TP 2
*
\fI{record_name, Name}\fR\&, where \fIName\fR\& must be an atom\&. All records stored in the table must have this name as the first element\&. It defaults to the same name as the table name\&.
.LP
.TP 2
*
\fI{snmp, SnmpStruct}\fR\&\&. For a description of \fISnmpStruct\fR\&, see \fImnesia:snmp_open_table/2\fR\&\&. If this attribute is present in \fIArgList\fR\& to \fImnesia:create_table/2\fR\&, the table is immediately accessible by SNMP\&. Therefore applications that use SNMP to manipulate and control the system can be designed easily, since Mnesia provides a direct mapping between the logical tables that make up an SNMP control application and the physical data that makes up a Mnesia table\&.
.LP
.TP 2
*
\fI{storage_properties, [{Backend, Properties}]\fR\& forwards more properties to the back end storage\&. \fIBackend\fR\& can currently be \fIets\fR\& or \fIdets\fR\&\&. \fIProperties\fR\& is a list of options sent to the back end storage during table creation\&. \fIProperties\fR\& cannot contain properties already used by Mnesia, such as \fItype\fR\& or \fInamed_table\fR\&\&.
.RS 2
.LP
For example:
.RE
.LP
.nf

mnesia:create_table(table, [{ram_copies, [node()]}, {disc_only_copies, nodes()},
       {storage_properties,
        [{ets, [compressed]}, {dets, [{auto_save, 5000}]} ]}])
.fi
.LP
.TP 2
*
\fI{type, Type}\fR\&, where \fIType\fR\& must be either of the atoms \fIset\fR\&, \fIordered_set\fR\&, or \fIbag\fR\&\&. Default is \fIset\fR\&\&. In a \fIset\fR\&, all records have unique keys\&. In a \fIbag\fR\&, several records can have the same key, but the record content is unique\&. If a non-unique record is stored, the old conflicting records are overwritten\&.
.RS 2
.LP
Notice that currently \fIordered_set\fR\& is not supported for \fIdisc_only_copies\fR\&\&.
.RE
.LP
.TP 2
*
\fI{local_content, Bool}\fR\&, where \fIBool\fR\& is \fItrue\fR\& or \fIfalse\fR\&\&. Default is \fIfalse\fR\&\&.
.LP
.RE

.LP
For example, the following call creates the \fIperson\fR\& table (defined earlier) and replicates it on two nodes:
.LP
.nf

mnesia:create_table(person,
    [{ram_copies, [N1, N2]},
     {attributes, record_info(fields, person)}]).
.fi
.LP
If it is required that Mnesia must build and maintain an extra index table on attribute \fIaddress\fR\& of all the \fIperson\fR\& records that are inserted in the table, the following code would be issued:
.LP
.nf

mnesia:create_table(person,
    [{ram_copies, [N1, N2]},
     {index, [address]},
     {attributes, record_info(fields, person)}]).
   
.fi
.LP
The specification of \fIindex\fR\& and \fIattributes\fR\& can be hard-coded as \fI{index, [2]}\fR\& and \fI{attributes, [name, age, address, salary, children]}\fR\&, respectively\&.
.LP
\fImnesia:create_table/2\fR\& writes records into the table \fIschema\fR\&\&. This function, and all other schema manipulation functions, are implemented with the normal transaction management system\&. This guarantees that schema updates are performed on all nodes in an atomic manner\&.
.RE
.LP
.B
deactivate_checkpoint(Name) -> ok | {error, Reason}
.br
.RS
.LP
The checkpoint is automatically deactivated when some of the tables involved have no retainer attached to them\&. This can occur when nodes go down or when a replica is deleted\&. Checkpoints are also deactivated with this function\&. \fIName\fR\& is the name of an active checkpoint\&.
.RE
.LP
.B
del_table_copy(Tab, Node) -> {aborted, R} | {atomic, ok}
.br
.RS
.LP
Deletes the replica of table \fITab\fR\& at node \fINode\fR\&\&. When the last replica is deleted with this function, the table disappears entirely\&.
.LP
This function can also be used to delete a replica of the table named \fIschema\fR\&\&. The Mnesia node is then removed\&. Notice that Mnesia must be stopped on the node first\&.
.RE
.LP
.B
del_table_index(Tab, AttrName) -> {aborted, R} | {atomic, ok}
.br
.RS
.LP
Deletes the index on attribute with name \fIAttrName\fR\& in a table\&.
.RE
.LP
.B
delete({Tab, Key}) -> transaction abort | ok
.br
.RS
.LP
Calls \fImnesia:delete(Tab, Key, write)\fR\&\&.
.RE
.LP
.B
delete(Tab, Key, LockKind) -> transaction abort | ok
.br
.RS
.LP
Deletes all records in table \fITab\fR\& with the key \fIKey\fR\&\&.
.LP
The semantics of this function is context-sensitive\&. For details, see \fImnesia:activity/4\fR\&\&. In transaction-context, it acquires a lock of type \fILockKind\fR\& in the record\&. Currently, the lock types \fIwrite\fR\& and \fIsticky_write\fR\& are supported\&.
.RE
.LP
.B
delete_object(Record) -> transaction abort | ok
.br
.RS
.LP
Calls \fImnesia:delete_object(Tab, Record, write)\fR\&, where \fITab\fR\& is \fIelement(1, Record)\fR\&\&.
.RE
.LP
.B
delete_object(Tab, Record, LockKind) -> transaction abort | ok
.br
.RS
.LP
If a table is of type \fIbag\fR\&, it can sometimes be needed to delete only some of the records with a certain key\&. This can be done with the function \fIdelete_object/3\fR\&\&. A complete record must be supplied to this function\&.
.LP
The semantics of this function is context-sensitive\&. For details, see \fImnesia:activity/4\fR\&\&. In transaction-context, it acquires a lock of type \fILockKind\fR\& on the record\&. Currently, the lock types \fIwrite\fR\& and \fIsticky_write\fR\& are supported\&.
.RE
.LP
.B
delete_schema(DiscNodes) -> ok | {error,Reason}
.br
.RS
.LP
Deletes a database created with \fImnesia:create_schema/1\fR\&\&. \fImnesia:delete_schema/1\fR\& fails if any of the Erlang nodes given as \fIDiscNodes\fR\& are not alive, or if Mnesia is running on any of the nodes\&.
.LP
After the database is deleted, it can still be possible to start Mnesia as a disc-less node\&. This depends on how configuration parameter \fIschema_location\fR\& is set\&.
.LP

.RS -4
.B
Warning:
.RE
Use this function with extreme caution, as it makes existing persistent data obsolete\&. Think twice before using it\&.

.RE
.LP
.B
delete_table(Tab) -> {aborted, Reason} | {atomic, ok}
.br
.RS
.LP
Permanently deletes all replicas of table \fITab\fR\&\&.
.RE
.LP
.B
dirty_all_keys(Tab) -> KeyList | exit({aborted, Reason})
.br
.RS
.LP
Dirty equivalent of the function \fImnesia:all_keys/1\fR\&\&.
.RE
.LP
.B
dirty_delete({Tab, Key}) -> ok | exit({aborted, Reason})
.br
.RS
.LP
Calls \fImnesia:dirty_delete(Tab, Key)\fR\&\&.
.RE
.LP
.B
dirty_delete(Tab, Key) -> ok | exit({aborted, Reason})
.br
.RS
.LP
Dirty equivalent of the function \fImnesia:delete/3\fR\&\&.
.RE
.LP
.B
dirty_delete_object(Record)
.br
.RS
.LP
Calls \fImnesia:dirty_delete_object(Tab, Record)\fR\&, where \fITab\fR\& is \fIelement(1, Record)\fR\&\&.
.RE
.LP
.B
dirty_delete_object(Tab, Record)
.br
.RS
.LP
Dirty equivalent of the function \fImnesia:delete_object/3\fR\&\&.
.RE
.LP
.B
dirty_first(Tab) -> Key | exit({aborted, Reason})
.br
.RS
.LP
Records in \fIset\fR\& or \fIbag\fR\& tables are not ordered\&. However, there is an ordering of the records that is unknown to the user\&. Therefore, a table can be traversed by this function with the function \fImnesia:dirty_next/2\fR\&\&.
.LP
If there are no records in the table, this function returns the atom \fI\&'$end_of_table\&'\fR\&\&. It is therefore highly undesirable, but not disallowed, to use this atom as the key for any user records\&.
.RE
.LP
.B
dirty_index_match_object(Pattern, Pos)
.br
.RS
.LP
Starts \fImnesia:dirty_index_match_object(Tab, Pattern, Pos)\fR\&, where \fITab\fR\& is \fIelement(1, Pattern)\fR\&\&.
.RE
.LP
.B
dirty_index_match_object(Tab, Pattern, Pos)
.br
.RS
.LP
Dirty equivalent of the function \fImnesia:index_match_object/4\fR\&\&.
.RE
.LP
.B
dirty_index_read(Tab, SecondaryKey, Pos)
.br
.RS
.LP
Dirty equivalent of the function \fImnesia:index_read/3\fR\&\&.
.RE
.LP
.B
dirty_last(Tab) -> Key | exit({aborted, Reason})
.br
.RS
.LP
Works exactly like \fImnesia:dirty_first/1\fR\& but returns the last object in Erlang term order for the \fIordered_set\fR\& table type\&. For all other table types, \fImnesia:dirty_first/1\fR\& and \fImnesia:dirty_last/1\fR\& are synonyms\&.
.RE
.LP
.B
dirty_match_object(Pattern) -> RecordList | exit({aborted, Reason})
.br
.RS
.LP
Calls \fImnesia:dirty_match_object(Tab, Pattern)\fR\&, where \fITab\fR\& is \fIelement(1, Pattern)\fR\&\&.
.RE
.LP
.B
dirty_match_object(Tab, Pattern) -> RecordList | exit({aborted, Reason})
.br
.RS
.LP
Dirty equivalent of the function \fImnesia:match_object/3\fR\&\&.
.RE
.LP
.B
dirty_next(Tab, Key) -> Key | exit({aborted, Reason})
.br
.RS
.LP
Traverses a table and performs operations on all records in the table\&. When the end of the table is reached, the special key \fI\&'$end_of_table\&'\fR\& is returned\&. Otherwise, the function returns a key that can be used to read the actual record\&. The behavior is undefined if another Erlang process performs write operations on the table while it is being traversed with the function \fImnesia:dirty_next/2\fR\&\&.
.RE
.LP
.B
dirty_prev(Tab, Key) -> Key | exit({aborted, Reason})
.br
.RS
.LP
Works exactly like \fImnesia:dirty_next/2\fR\& but returns the previous object in Erlang term order for the \fIordered_set\fR\& table type\&. For all other table types, \fImnesia:dirty_next/2\fR\& and \fImnesia:dirty_prev/2\fR\& are synonyms\&.
.RE
.LP
.B
dirty_read({Tab, Key}) -> ValueList | exit({aborted, Reason}
.br
.RS
.LP
Calls \fImnesia:dirty_read(Tab, Key)\fR\&\&.
.RE
.LP
.B
dirty_read(Tab, Key) -> ValueList | exit({aborted, Reason}
.br
.RS
.LP
Dirty equivalent of the function \fImnesia:read/3\fR\&\&.
.RE
.LP
.B
dirty_select(Tab, MatchSpec) -> ValueList | exit({aborted, Reason}
.br
.RS
.LP
Dirty equivalent of the function \fImnesia:select/2\fR\&\&.
.RE
.LP
.B
dirty_slot(Tab, Slot) -> RecordList | exit({aborted, Reason})
.br
.RS
.LP
Traverses a table in a manner similar to the function \fImnesia:dirty_next/2\fR\&\&. A table has a number of slots that range from 0 (zero) to an unknown upper bound\&. The function \fImnesia:dirty_slot/2\fR\& returns the special atom \fI\&'$end_of_table\&'\fR\& when the end of the table is reached\&. The behavior of this function is undefined if a write operation is performed on the table while it is being traversed\&.
.RE
.LP
.B
dirty_update_counter({Tab, Key}, Incr) -> NewVal | exit({aborted, Reason})
.br
.RS
.LP
Calls \fImnesia:dirty_update_counter(Tab, Key, Incr)\fR\&\&.
.RE
.LP
.B
dirty_update_counter(Tab, Key, Incr) -> NewVal | exit({aborted, Reason})
.br
.RS
.LP
Mnesia has no special counter records\&. However, records of the form \fI{Tab, Key, Integer}\fR\& can be used as (possibly disc-resident) counters when \fITab\fR\& is a \fIset\fR\&\&. This function updates a counter with a positive or negative number\&. However, counters can never become less than zero\&. There are two significant differences between this function and the action of first reading the record, performing the arithmetics, and then writing the record:
.RS 2
.TP 2
*
It is much more efficient\&. 
.LP
.TP 2
*
\fImnesia:dirty_update_counter/3\fR\& is performed as an atomic operation although it is not protected by a transaction\&. 
.LP
.RE

.LP
If two processes perform \fImnesia:dirty_update_counter/3\fR\& simultaneously, both updates take effect without the risk of losing one of the updates\&. The new value \fINewVal\fR\& of the counter is returned\&.
.LP
If \fIKey\fR\& do not exists, a new record is created with value \fIIncr\fR\& if it is larger than 0, otherwise it is set to 0\&.
.RE
.LP
.B
dirty_write(Record) -> ok | exit({aborted, Reason})
.br
.RS
.LP
Calls \fImnesia:dirty_write(Tab, Record)\fR\&, where \fITab\fR\& is \fIelement(1, Record)\fR\&\&.
.RE
.LP
.B
dirty_write(Tab, Record) -> ok | exit({aborted, Reason})
.br
.RS
.LP
Dirty equivalent of the function \fImnesia:write/3\fR\&\&.
.RE
.LP
.B
dump_log() -> dumped
.br
.RS
.LP
Performs a user-initiated dump of the local log file\&. This is usually not necessary, as Mnesia by default manages this automatically\&. See configuration parameters \fBdump_log_time_threshold\fR\& and \fBdump_log_write_threshold\fR\&\&.
.RE
.LP
.B
dump_tables(TabList) -> {atomic, ok} | {aborted, Reason}
.br
.RS
.LP
Dumps a set of \fIram_copies\fR\& tables to disc\&. The next time the system is started, these tables are initiated with the data found in the files that are the result of this dump\&. None of the tables can have disc-resident replicas\&.
.RE
.LP
.B
dump_to_textfile(Filename)
.br
.RS
.LP
Dumps all local tables of a Mnesia system into a text file, which can be edited (by a normal text editor) and then be reloaded with \fImnesia:load_textfile/1\fR\&\&. Only use this function for educational purposes\&. Use other functions to deal with real backups\&.
.RE
.LP
.B
error_description(Error) -> String
.br
.RS
.LP
All Mnesia transactions, including all the schema update functions, either return value \fI{atomic, Val}\fR\& or the tuple \fI{aborted, Reason}\fR\&\&. \fIReason\fR\& can be either of the atoms in the following list\&. The function \fIerror_description/1\fR\& returns a descriptive string that describes the error\&.
.RS 2
.TP 2
*
\fInested_transaction\fR\&\&. Nested transactions are not allowed in this context\&. 
.LP
.TP 2
*
\fIbadarg\fR\&\&. Bad or invalid argument, possibly bad type\&. 
.LP
.TP 2
*
\fIno_transaction\fR\&\&. Operation not allowed outside transactions\&. 
.LP
.TP 2
*
\fIcombine_error\fR\&\&. Table options illegally combined\&. 
.LP
.TP 2
*
\fIbad_index\fR\&\&. Index already exists, or was out of bounds\&. 
.LP
.TP 2
*
\fIalready_exists\fR\&\&. Schema option to be activated is already on\&. 
.LP
.TP 2
*
\fIindex_exists\fR\&\&. Some operations cannot be performed on tables with an index\&. 
.LP
.TP 2
*
\fIno_exists\fR\&\&. Tried to perform operation on non-existing (not-alive) item\&. 
.LP
.TP 2
*
\fIsystem_limit\fR\&\&. A system limit was exhausted\&. 
.LP
.TP 2
*
\fImnesia_down\fR\&\&. A transaction involves records on a remote node, which became unavailable before the transaction was completed\&. Records are no longer available elsewhere in the network\&. 
.LP
.TP 2
*
\fInot_a_db_node\fR\&\&. A node was mentioned that does not exist in the schema\&. 
.LP
.TP 2
*
\fIbad_type\fR\&\&. Bad type specified in argument\&. 
.LP
.TP 2
*
\fInode_not_running\fR\&\&. Node is not running\&. 
.LP
.TP 2
*
\fItruncated_binary_file\fR\&\&. Truncated binary in file\&. 
.LP
.TP 2
*
\fIactive\fR\&\&. Some delete operations require that all active records are removed\&. 
.LP
.TP 2
*
\fIillegal\fR\&\&. Operation not supported on this record\&. 
.LP
.RE

.LP
\fIError\fR\& can be \fIReason\fR\&, \fI{error, Reason}\fR\&, or \fI{aborted, Reason}\fR\&\&. \fIReason\fR\& can be an atom or a tuple with \fIReason\fR\& as an atom in the first field\&.
.LP
The following examples illustrate a function that returns an error, and the method to retrieve more detailed error information:
.RS 2
.TP 2
*
The function \fBmnesia:create_table(bar, [{attributes, 3\&.14}])\fR\& returns the tuple \fI{aborted,Reason}\fR\&, where \fIReason\fR\& is the tuple \fI{bad_type,bar,3\&.14000}\fR\&\&.
.LP
.TP 2
*
The function \fBmnesia:error_description(Reason)\fR\& returns the term \fI{"Bad type on some provided arguments",bar,3\&.14000}\fR\&, which is an error description suitable for display\&.
.LP
.RE

.RE
.LP
.B
ets(Fun, [, Args]) -> ResultOfFun | exit(Reason)
.br
.RS
.LP
Calls the \fIFun\fR\& in a raw context that is not protected by a transaction\&. The Mnesia function call is performed in the \fIFun\fR\& and performed directly on the local ETS tables on the assumption that the local storage type is \fIram_copies\fR\& and the tables are not replicated to other nodes\&. Subscriptions are not triggered and checkpoints are not updated, but it is extremely fast\&. This function can also be applied to \fIdisc_copies\fR\& tables if all operations are read only\&. For details, see \fImnesia:activity/4\fR\& and the User\&'s Guide\&.
.LP
Notice that calling (nesting) a \fImnesia:ets\fR\& inside a transaction-context inherits the transaction semantics\&.
.RE
.LP
.B
first(Tab) -> Key | transaction abort
.br
.RS
.LP
Records in \fIset\fR\& or \fIbag\fR\& tables are not ordered\&. However, there is an ordering of the records that is unknown to the user\&. A table can therefore be traversed by this function with the function \fImnesia:next/2\fR\&\&.
.LP
If there are no records in the table, this function returns the atom \fI\&'$end_of_table\&'\fR\&\&. It is therefore highly undesirable, but not disallowed, to use this atom as the key for any user records\&.
.RE
.LP
.B
foldl(Function, Acc, Table) -> NewAcc | transaction abort
.br
.RS
.LP
Iterates over the table \fITable\fR\& and calls \fIFunction(Record, NewAcc)\fR\& for each \fIRecord\fR\& in the table\&. The term returned from \fIFunction\fR\& is used as the second argument in the next call to \fIFunction\fR\&\&.
.LP
\fIfoldl\fR\& returns the same term as the last call to \fIFunction\fR\& returned\&.
.RE
.LP
.B
foldr(Function, Acc, Table) -> NewAcc | transaction abort
.br
.RS
.LP
Works exactly like \fIfoldl/3\fR\& but iterates the table in the opposite order for the \fIordered_set\fR\& table type\&. For all other table types, \fIfoldr/3\fR\& and \fIfoldl/3\fR\& are synonyms\&.
.RE
.LP
.B
force_load_table(Tab) -> yes | ErrorDescription
.br
.RS
.LP
The Mnesia algorithm for table load can lead to a situation where a table cannot be loaded\&. This situation occurs when a node is started and Mnesia concludes, or suspects, that another copy of the table was active after this local copy became inactive because of a system crash\&.
.LP
If this situation is not acceptable, this function can be used to override the strategy of the Mnesia table load algorithm\&. This can lead to a situation where some transaction effects are lost with an inconsistent database as result, but for some applications high availability is more important than consistent data\&.
.RE
.LP
.B
index_match_object(Pattern, Pos) -> transaction abort | ObjList
.br
.RS
.LP
Starts \fImnesia:index_match_object(Tab, Pattern, Pos, read)\fR\&, where \fITab\fR\& is \fIelement(1, Pattern)\fR\&\&.
.RE
.LP
.B
index_match_object(Tab, Pattern, Pos, LockKind) -> transaction abort | ObjList
.br
.RS
.LP
In a manner similar to the function \fImnesia:index_read/3\fR\&, any index information can be used when trying to match records\&. This function takes a pattern that obeys the same rules as the function \fImnesia:match_object/3\fR\&, except that this function requires the following conditions:
.RS 2
.TP 2
*
The table \fITab\fR\& must have an index on position \fIPos\fR\&\&.
.LP
.TP 2
*
The element in position \fIPos\fR\& in \fIPattern\fR\& must be bound\&. \fIPos\fR\& is an integer (\fI#record\&.Field\fR\&) or an attribute name\&.
.LP
.RE

.LP
The two index search functions described here are automatically started when searching tables with \fIqlc\fR\& list comprehensions and also when using the low-level \fImnesia:[dirty_]match_object\fR\& functions\&.
.LP
The semantics of this function is context-sensitive\&. For details, see \fImnesia:activity/4\fR\&\&. In transaction-context, it acquires a lock of type \fILockKind\fR\& on the entire table or on a single record\&. Currently, the lock type \fIread\fR\& is supported\&.
.RE
.LP
.B
index_read(Tab, SecondaryKey, Pos) -> transaction abort | RecordList
.br
.RS
.LP
Assume that there is an index on position \fIPos\fR\& for a certain record type\&. This function can be used to read the records without knowing the actual key for the record\&. For example, with an index in position 1 of table \fIperson\fR\&, the call \fImnesia:index_read(person, 36, #person\&.age)\fR\& returns a list of all persons with age 36\&. \fIPos\fR\& can also be an attribute name (atom), but if the notation \fImnesia:index_read(person, 36, age)\fR\& is used, the field position is searched for in runtime, for each call\&.
.LP
The semantics of this function is context-sensitive\&. For details, see \fImnesia:activity/4\fR\&\&. In transaction-context, it acquires a read lock on the entire table\&.
.RE
.LP
.B
info() -> ok
.br
.RS
.LP
Prints system information on the terminal\&. This function can be used even if Mnesia is not started\&. However, more information is displayed if Mnesia is started\&.
.RE
.LP
.B
install_fallback(Opaque) -> ok | {error,Reason}
.br
.RS
.LP
Calls \fImnesia:install_fallback(Opaque, Args)\fR\&, where \fIArgs\fR\& is \fI[{scope, global}]\fR\&\&.
.RE
.LP
.B
install_fallback(Opaque), BackupMod) -> ok | {error,Reason}
.br
.RS
.LP
Calls \fImnesia:install_fallback(Opaque, Args)\fR\&, where \fIArgs\fR\& is \fI[{scope, global}, {module, BackupMod}]\fR\&\&.
.RE
.LP
.B
install_fallback(Opaque, Args) -> ok | {error,Reason}
.br
.RS
.LP
Installs a backup as fallback\&. The fallback is used to restore the database at the next startup\&. Installation of fallbacks requires Erlang to be operational on all the involved nodes, but it does not matter if Mnesia is running or not\&. The installation of the fallback fails if the local node is not one of the disc-resident nodes in the backup\&.
.LP
\fIArgs\fR\& is a list of the following tuples:
.RS 2
.TP 2
*
\fI{module, BackupMod}\fR\&\&. All accesses of the backup media are performed through a callback module named \fIBackupMod\fR\&\&. Argument \fIOpaque\fR\& is forwarded to the callback module, which can interpret it as it wishes\&. The default callback module is called \fImnesia_backup\fR\& and it interprets argument \fIOpaque\fR\& as a local filename\&. The default for this module is also configurable through configuration parameter \fI-mnesia mnesia_backup\fR\&\&.
.LP
.TP 2
*
\fI{scope, Scope}\fR\&\&. The \fIScope\fR\& of a fallback is either \fIglobal\fR\& for the entire database or \fIlocal\fR\& for one node\&. By default, the installation of a fallback is a global operation, which either is performed on all nodes with a disc-resident schema or none\&. Which nodes that are disc-resident is determined from the schema information in the backup\&.
.RS 2
.LP
If \fIScope\fR\& of the operation is \fIlocal\fR\&, the fallback is only installed on the local node\&.
.RE
.LP
.TP 2
*
\fI{mnesia_dir, AlternateDir}\fR\&\&. This argument is only valid if the scope of the installation is \fIlocal\fR\&\&. Normally the installation of a fallback is targeted to the Mnesia directory, as configured with configuration parameter \fI-mnesia dir\fR\&\&. But by explicitly supplying an \fIAlternateDir\fR\&, the fallback is installed there regardless of the Mnesia directory configuration parameter setting\&. After installation of a fallback on an alternative Mnesia directory, that directory is fully prepared for use as an active Mnesia directory\&.
.RS 2
.LP
This is a dangerous feature that must be used with care\&. By unintentional mixing of directories, you can easily end up with an inconsistent database, if the same backup is installed on more than one directory\&.
.RE
.LP
.RE

.RE
.LP
.B
is_transaction() -> boolean
.br
.RS
.LP
When this function is executed inside a transaction-context, it returns \fItrue\fR\&, otherwise \fIfalse\fR\&\&.
.RE
.LP
.B
last(Tab) -> Key | transaction abort
.br
.RS
.LP
Works exactly like \fImnesia:first/1\fR\&, but returns the last object in Erlang term order for the \fIordered_set\fR\& table type\&. For all other table types, \fImnesia:first/1\fR\& and \fImnesia:last/1\fR\& are synonyms\&.
.RE
.LP
.B
load_textfile(Filename)
.br
.RS
.LP
Loads a series of definitions and data found in the text file (generated with \fImnesia:dump_to_textfile/1\fR\&) into Mnesia\&. This function also starts Mnesia and possibly creates a new schema\&. This function is intended for educational purposes only\&. It is recommended to use other functions to deal with real backups\&.
.RE
.LP
.B
lock(LockItem, LockKind) -> Nodes | ok | transaction abort
.br
.RS
.LP
Write locks are normally acquired on all nodes where a replica of the table resides (and is active)\&. Read locks are acquired on one node (the local node if a local replica exists)\&. Most of the context-sensitive access functions acquire an implicit lock if they are started in a transaction-context\&. The granularity of a lock can either be a single record or an entire table\&.
.LP
The normal use is to call the function without checking the return value, as it exits if it fails and the transaction is restarted by the transaction manager\&. It returns all the locked nodes if a write lock is acquired and \fIok\fR\& if it was a read lock\&.
.LP
The function \fImnesia:lock/2\fR\& is intended to support explicit locking on tables, but is also intended for situations when locks need to be acquired regardless of how tables are replicated\&. Currently, two kinds of \fILockKind\fR\& are supported:
.RS 2
.TP 2
.B
\fIwrite\fR\&:
Write locks are exclusive\&. This means that if one transaction manages to acquire a write lock on an item, no other transaction can acquire any kind of lock on the same item\&.
.TP 2
.B
\fIread\fR\&:
Read locks can be shared\&. This means that if one transaction manages to acquire a read lock on an item, other transactions can also acquire a read lock on the same item\&. However, if someone has a read lock, no one can acquire a write lock at the same item\&. If someone has a write lock, no one can acquire either a read lock or a write lock at the same item\&.
.RE
.LP
Conflicting lock requests are automatically queued if there is no risk of a deadlock\&. Otherwise the transaction must be terminated and executed again\&. Mnesia does this automatically as long as the upper limit of the maximum \fIretries\fR\& is not reached\&. For details, see \fImnesia:transaction/3\fR\&\&.
.LP
For the sake of completeness, sticky write locks are also described here even if a sticky write lock is not supported by this function:
.RS 2
.TP 2
.B
\fIsticky_write\fR\&:
Sticky write locks are a mechanism that can be used to optimize write lock acquisition\&. If your application uses replicated tables mainly for fault tolerance (as opposed to read access optimization purpose), sticky locks can be the best option available\&.
.RS 2
.LP
When a sticky write lock is acquired, all nodes are informed which node is locked\&. Then, sticky lock requests from the same node are performed as a local operation without any communication with other nodes\&. The sticky lock lingers on the node even after the transaction ends\&. For details, see the User\&'s Guide\&.
.RE
.RE
.LP
Currently, this function supports two kinds of \fILockItem\fR\&:
.RS 2
.TP 2
.B
\fI{table, Tab}\fR\&:
This acquires a lock of type \fILockKind\fR\& on the entire table \fITab\fR\&\&.
.TP 2
.B
\fI{global, GlobalKey, Nodes}\fR\&:
This acquires a lock of type \fILockKind\fR\& on the global resource \fIGlobalKey\fR\&\&. The lock is acquired on all active nodes in the \fINodes\fR\& list\&.
.RE
.LP
Locks are released when the outermost transaction ends\&.
.LP
The semantics of this function is context-sensitive\&. For details, see \fImnesia:activity/4\fR\&\&. In transaction-context, it acquires locks, otherwise it ignores the request\&.
.RE
.LP
.B
match_object(Pattern) -> transaction abort | RecList
.br
.RS
.LP
Calls \fImnesia:match_object(Tab, Pattern, read)\fR\&, where \fITab\fR\& is \fIelement(1, Pattern)\fR\&\&.
.RE
.LP
.B
match_object(Tab, Pattern, LockKind) -> transaction abort | RecList
.br
.RS
.LP
Takes a pattern with "don\&'t care" variables denoted as a \fI\&'_\&'\fR\& parameter\&. This function returns a list of records that matched the pattern\&. Since the second element of a record in a table is considered to be the key for the record, the performance of this function depends on whether this key is bound or not\&.
.LP
For example, the call \fImnesia:match_object(person, {person, \&'_\&', 36, \&'_\&', \&'_\&'}, read)\fR\& returns a list of all person records with an \fIage\fR\& field of 36\&.
.LP
The function \fImnesia:match_object/3\fR\& automatically uses indexes if these exist\&. However, no heuristics are performed to select the best index\&.
.LP
The semantics of this function is context-sensitive\&. For details, see \fImnesia:activity/4\fR\&\&. In transaction-context, it acquires a lock of type \fILockKind\fR\& on the entire table or a single record\&. Currently, the lock type \fIread\fR\& is supported\&.
.RE
.LP
.B
move_table_copy(Tab, From, To) -> {aborted, Reason} | {atomic, ok}
.br
.RS
.LP
Moves the copy of table \fITab\fR\& from node \fIFrom\fR\& to node \fITo\fR\&\&.
.LP
The storage type is preserved\&. For example, a RAM table moved from one node remains a RAM on the new node\&. Other transactions can still read and write in the table while it is being moved\&.
.LP
This function cannot be used on \fIlocal_content\fR\& tables\&.
.RE
.LP
.B
next(Tab, Key) -> Key | transaction abort
.br
.RS
.LP
Traverses a table and performs operations on all records in the table\&. When the end of the table is reached, the special key \fI\&'$end_of_table\&'\fR\& is returned\&. Otherwise the function returns a key that can be used to read the actual record\&.
.RE
.LP
.B
prev(Tab, Key) -> Key | transaction abort
.br
.RS
.LP
Works exactly like \fImnesia:next/2\fR\&, but returns the previous object in Erlang term order for the \fIordered_set\fR\& table type\&. For all other table types, \fImnesia:next/2\fR\& and \fImnesia:prev/2\fR\& are synonyms\&.
.RE
.LP
.B
read({Tab, Key}) -> transaction abort | RecordList
.br
.RS
.LP
Calls function \fImnesia:read(Tab, Key, read)\fR\&\&.
.RE
.LP
.B
read(Tab, Key) -> transaction abort | RecordList
.br
.RS
.LP
Calls function \fImnesia:read(Tab, Key, read)\fR\&\&.
.RE
.LP
.B
read(Tab, Key, LockKind) -> transaction abort | RecordList
.br
.RS
.LP
Reads all records from table \fITab\fR\& with key \fIKey\fR\&\&. This function has the same semantics regardless of the location of \fITab\fR\&\&. If the table is of type \fIbag\fR\&, the function \fImnesia:read(Tab, Key)\fR\& can return an arbitrarily long list\&. If the table is of type \fIset\fR\&, the list is either of length 1, or \fI[]\fR\&\&.
.LP
The semantics of this function is context-sensitive\&. For details, see \fImnesia:activity/4\fR\&\&. In transaction-context, it acquires a lock of type \fILockKind\fR\&\&. Currently, the lock types \fIread\fR\&, \fIwrite\fR\&, and \fIsticky_write\fR\& are supported\&.
.LP
If the user wants to update the record, it is more efficient to use \fIwrite/sticky_write\fR\& as the \fILockKind\fR\&\&. If majority checking is active on the table, it is checked as soon as a write lock is attempted\&. This can be used to end quickly if the majority condition is not met\&.
.RE
.LP
.B
read_lock_table(Tab) -> ok | transaction abort
.br
.RS
.LP
Calls the function \fImnesia:lock({table, Tab}, read)\fR\&\&.
.RE
.LP
.B
report_event(Event) -> ok
.br
.RS
.LP
When tracing a system of Mnesia applications it is useful to be able to interleave Mnesia own events with application-related events that give information about the application context\&.
.LP
Whenever the application begins a new and demanding Mnesia task, or if it enters a new interesting phase in its execution, it can be a good idea to use \fImnesia:report_event/1\fR\&\&. \fIEvent\fR\& can be any term and generates a \fI{mnesia_user, Event}\fR\& event for any processes that subscribe to Mnesia system events\&.
.RE
.LP
.B
restore(Opaque, Args) -> {atomic, RestoredTabs} |{aborted, Reason}
.br
.RS
.LP
With this function, tables can be restored online from a backup without restarting Mnesia\&. \fIOpaque\fR\& is forwarded to the backup module\&. \fIArgs\fR\& is a list of the following tuples:
.RS 2
.TP 2
*
\fI{module,BackupMod}\fR\&\&. The backup module \fIBackupMod\fR\& is used to access the backup media\&. If omitted, the default backup module is used\&. 
.LP
.TP 2
*
\fI{skip_tables, TabList}\fR\&, where \fITabList\fR\& is a list of tables that is not to be read from the backup\&. 
.LP
.TP 2
*
\fI{clear_tables, TabList}\fR\&, where \fITabList\fR\& is a list of tables that is to be cleared before the records from the backup are inserted\&. That is, all records in the tables are deleted before the tables are restored\&. Schema information about the tables is not cleared or read from the backup\&. 
.LP
.TP 2
*
\fI{keep_tables, TabList}\fR\&, where \fITabList\fR\& is a list of tables that is not to be cleared before the records from the backup are inserted\&. That is, the records in the backup are added to the records in the table\&. Schema information about the tables is not cleared or read from the backup\&. 
.LP
.TP 2
*
\fI{recreate_tables, TabList}\fR\&, where \fITabList\fR\& is a list of tables that is to be recreated before the records from the backup are inserted\&. The tables are first deleted and then created with the schema information from the backup\&. All the nodes in the backup need to be operational\&. 
.LP
.TP 2
*
\fI{default_op, Operation}\fR\&, where \fIOperation\fR\& is either of the operations \fIskip_tables\fR\&, \fIclear_tables\fR\&, \fIkeep_tables\fR\&, or \fIrecreate_tables\fR\&\&. The default operation specifies which operation that is to be used on tables from the backup that is not specified in any of the mentioned lists\&. If omitted, operation \fIclear_tables\fR\& is used\&. 
.LP
.RE

.LP
The affected tables are write-locked during the restoration\&. However, regardless of the lock conflicts caused by this, the applications can continue to do their work while the restoration is being performed\&. The restoration is performed as one single transaction\&.
.LP
If the database is huge, it it not always possible to restore it online\&. In such cases, restore the old database by installing a fallback and then restart\&.
.RE
.LP
.B
s_delete({Tab, Key}) -> ok | transaction abort
.br
.RS
.LP
Calls the function \fImnesia:delete(Tab, Key, sticky_write)\fR\&
.RE
.LP
.B
s_delete_object(Record) -> ok | transaction abort
.br
.RS
.LP
Calls the function \fImnesia:delete_object(Tab, Record, sticky_write)\fR\&, where \fITab\fR\& is \fIelement(1, Record)\fR\&\&.
.RE
.LP
.B
s_write(Record) -> ok | transaction abort
.br
.RS
.LP
Calls the function \fImnesia:write(Tab, Record, sticky_write)\fR\&, where \fITab\fR\& is \fIelement(1, Record)\fR\&\&.
.RE
.LP
.B
schema() -> ok
.br
.RS
.LP
Prints information about all table definitions on the terminal\&.
.RE
.LP
.B
schema(Tab) -> ok
.br
.RS
.LP
Prints information about one table definition on the terminal\&.
.RE
.LP
.B
select(Tab, MatchSpec [, Lock]) -> transaction abort | [Object]
.br
.RS
.LP
Matches the objects in table \fITab\fR\& using a \fImatch_spec\fR\& as described in the \fBets:select/3\fR\&\&. Optionally a lock \fIread\fR\& or \fIwrite\fR\& can be given as the third argument\&. Default is \fIread\fR\&\&. The return value depends on \fIMatchSpec\fR\&\&.
.LP
Notice that for best performance, \fIselect\fR\& is to be used before any modifying operations are done on that table in the same transaction\&. That is, do not use \fIwrite\fR\& or \fIdelete\fR\& before a \fIselect\fR\&\&.
.LP
In its simplest forms, the \fImatch_spec\fR\& look as follows:
.RS 2
.TP 2
*
\fIMatchSpec = [MatchFunction]\fR\&
.LP
.TP 2
*
\fIMatchFunction = {MatchHead, [Guard], [Result]}\fR\&
.LP
.TP 2
*
\fIMatchHead = tuple() | record()\fR\&
.LP
.TP 2
*
\fIGuard = {"Guardtest name", \&.\&.\&.}\fR\&
.LP
.TP 2
*
\fIResult = "Term construct"\fR\&
.LP
.RE

.LP
For a complete description of \fIselect\fR\&, see the \fBERTS\fR\& User\&'s Guide and the \fBets\fR\& manual page in STDLIB\&.
.LP
For example, to find the names of all male persons older than 30 in table \fITab\fR\&:
.LP
.nf

MatchHead = #person{name='$1', sex=male, age='$2', _='_'},
Guard = {'>', '$2', 30},
Result = '$1',
mnesia:select(Tab,[{MatchHead, [Guard], [Result]}]),
.fi
.RE
.LP
.B
select(Tab, MatchSpec, NObjects, Lock) -> transaction abort | {[Object],Cont} | \&'$end_of_table\&'
.br
.RS
.LP
Matches the objects in table \fITab\fR\& using a \fImatch_spec\fR\& as described in the \fBERTS\fR\& User\&'s Guide, and returns a chunk of terms and a continuation\&. The wanted number of returned terms is specified by argument \fINObjects\fR\&\&. The lock argument can be \fIread\fR\& or \fIwrite\fR\&\&. The continuation is to be used as argument to \fImnesia:select/1\fR\&, if more or all answers are needed\&.
.LP
Notice that for best performance, \fIselect\fR\& is to be used before any modifying operations are done on that table in the same transaction\&. That is, do not use \fImnesia:write\fR\& or \fImnesia:delete\fR\& before a \fImnesia:select\fR\&\&. For efficiency, \fINObjects\fR\& is a recommendation only and the result can contain anything from an empty list to all available results\&.
.RE
.LP
.B
select(Cont) -> transaction abort | {[Object],Cont} | \&'$end_of_table\&'
.br
.RS
.LP
Selects more objects with the match specification initiated by \fImnesia:select/4\fR\&\&.
.LP
Notice that any modifying operations, that is, \fImnesia:write\fR\& or \fImnesia:delete\fR\&, that are done between the \fImnesia:select/4\fR\& and \fImnesia:select/1\fR\& calls are not visible in the result\&.
.RE
.LP
.B
set_debug_level(Level) -> OldLevel
.br
.RS
.LP
Changes the internal debug level of Mnesia\&. For details, see \fBSection Configuration Parameters\fR\&\&.
.RE
.LP
.B
set_master_nodes(MasterNodes) -> ok | {error, Reason}
.br
.RS
.LP
For each table Mnesia determines its replica nodes (\fITabNodes\fR\&) and starts \fImnesia:set_master_nodes(Tab, TabMasterNodes)\fR\&\&. where \fITabMasterNodes\fR\& is the intersection of \fIMasterNodes\fR\& and \fITabNodes\fR\&\&. For semantics, see \fImnesia:set_master_nodes/2\fR\&\&.
.RE
.LP
.B
set_master_nodes(Tab, MasterNodes) -> ok | {error, Reason}
.br
.RS
.LP
If the application detects a communication failure (in a potentially partitioned network) that can have caused an inconsistent database, it can use the function \fImnesia:set_master_nodes(Tab, MasterNodes)\fR\& to define from which nodes each table is to be loaded\&. At startup, the Mnesia normal table load algorithm is bypassed and the table is loaded from one of the master nodes defined for the table, regardless of when and if Mnesia terminated on other nodes\&. \fIMasterNodes\fR\& can only contain nodes where the table has a replica\&. If the \fIMasterNodes\fR\& list is empty, the master node recovery mechanism for the particular table is reset, and the normal load mechanism is used at the next restart\&.
.LP
The master node setting is always local\&. It can be changed regardless if Mnesia is started or not\&.
.LP
The database can also become inconsistent if configuration parameter \fImax_wait_for_decision\fR\& is used or if \fImnesia:force_load_table/1\fR\& is used\&.
.RE
.LP
.B
snmp_close_table(Tab) -> {aborted, R} | {atomic, ok}
.br
.RS
.LP
Removes the possibility for SNMP to manipulate the table\&.
.RE
.LP
.B
snmp_get_mnesia_key(Tab, RowIndex) -> {ok, Key} | undefined
.br
.RS
.LP
Types:

.RS 3
Tab ::= atom()
.br
RowIndex ::= [integer()]
.br
Key ::= key() | {key(), key(), \&.\&.\&.}
.br
key() ::= integer() | string() | [integer()]
.br
.RE
.RE
.RS
.LP
Transforms an SNMP index to the corresponding Mnesia key\&. If the SNMP table has multiple keys, the key is a tuple of the key columns\&.
.RE
.LP
.B
snmp_get_next_index(Tab, RowIndex) -> {ok, NextIndex} | endOfTable
.br
.RS
.LP
Types:

.RS 3
Tab ::= atom()
.br
RowIndex ::= [integer()]
.br
NextIndex ::= [integer()]
.br
.RE
.RE
.RS
.LP
\fIRowIndex\fR\& can specify a non-existing row\&. Specifically, it can be the empty list\&. Returns the index of the next lexicographical row\&. If \fIRowIndex\fR\& is the empty list, this function returns the index of the first row in the table\&.
.RE
.LP
.B
snmp_get_row(Tab, RowIndex) -> {ok, Row} | undefined
.br
.RS
.LP
Types:

.RS 3
Tab ::= atom()
.br
RowIndex ::= [integer()]
.br
Row ::= record(Tab)
.br
.RE
.RE
.RS
.LP
Reads a row by its SNMP index\&. This index is specified as an SNMP Object Identifier, a list of integers\&.
.RE
.LP
.B
snmp_open_table(Tab, SnmpStruct) -> {aborted, R} | {atomic, ok}
.br
.RS
.LP
Types:

.RS 3
Tab ::= atom()
.br
SnmpStruct ::= [{key, type()}]
.br
type() ::= type_spec() | {type_spec(), type_spec(), \&.\&.\&.}
.br
type_spec() ::= fix_string | string | integer
.br
.RE
.RE
.RS
.LP
A direct one-to-one mapping can be established between Mnesia tables and SNMP tables\&. Many telecommunication applications are controlled and monitored by the SNMP protocol\&. This connection between Mnesia and SNMP makes it simple and convenient to achieve this mapping\&.
.LP
Argument \fISnmpStruct\fR\& is a list of SNMP information\&. Currently, the only information needed is information about the key types in the table\&. Multiple keys cannot be handled in Mnesia, but many SNMP tables have multiple keys\&. Therefore, the following convention is used: if a table has multiple keys, these must always be stored as a tuple of the keys\&. Information about the key types is specified as a tuple of atoms describing the types\&. The only significant type is \fIfix_string\fR\&\&. This means that a string has a fixed size\&.
.LP
For example, the following causes table \fIperson\fR\& to be ordered as an SNMP table:
.LP
.nf

mnesia:snmp_open_table(person, [{key, string}])
.fi
.LP
Consider the following schema for a table of company employees\&. Each employee is identified by department number and name\&. The other table column stores the telephone number:
.LP
.nf

mnesia:create_table(employee,
    [{snmp, [{key, {integer, string}}]},
     {attributes, record_info(fields, employees)}]),
.fi
.LP
The corresponding SNMP table would have three columns: \fIdepartment\fR\&, \fIname\fR\&, and \fItelno\fR\&\&.
.LP
An option is to have table columns that are not visible through the SNMP protocol\&. These columns must be the last columns of the table\&. In the previous example, the SNMP table could have columns \fIdepartment\fR\& and \fIname\fR\& only\&. The application could then use column \fItelno\fR\& internally, but it would not be visible to the SNMP managers\&.
.LP
In a table monitored by SNMP, all elements must be integers, strings, or lists of integers\&.
.LP
When a table is SNMP ordered, modifications are more expensive than usual, O(logN)\&. Also, more memory is used\&.
.LP
Notice that only the lexicographical SNMP ordering is implemented in Mnesia, not the actual SNMP monitoring\&.
.RE
.LP
.B
start() -> ok | {error, Reason}
.br
.RS
.LP
The startup procedure for a set of Mnesia nodes is a fairly complicated operation\&. A Mnesia system consists of a set of nodes, with Mnesia started locally on all participating nodes\&. Normally, each node has a directory where all the Mnesia files are written\&. This directory is referred to as the Mnesia directory\&. Mnesia can also be started on disc-less nodes\&. For more information about disc-less nodes, see \fImnesia:create_schema/1\fR\& and the User\&'s Guide\&.
.LP
The set of nodes that makes up a Mnesia system is kept in a schema\&. Mnesia nodes can be added to or removed from the schema\&. The initial schema is normally created on disc with the function \fImnesia:create_schema/1\fR\&\&. On disc-less nodes, a tiny default schema is generated each time Mnesia is started\&. During the startup procedure, Mnesia exchanges schema information between the nodes to verify that the table definitions are compatible\&.
.LP
Each schema has a unique cookie, which can be regarded as a unique schema identifier\&. The cookie must be the same on all nodes where Mnesia is supposed to run\&. For details, see the User\&'s Guide\&.
.LP
The schema file and all other files that Mnesia needs are kept in the Mnesia directory\&. The command-line option \fI-mnesia dir Dir\fR\& can be used to specify the location of this directory to the Mnesia system\&. If no such command-line option is found, the name of the directory defaults to \fIMnesia\&.Node\fR\&\&.
.LP
\fIapplication:start(mnesia)\fR\& can also be used\&.
.RE
.LP
.B
stop() -> stopped
.br
.RS
.LP
Stops Mnesia locally on the current node\&.
.LP
\fIapplication:stop(mnesia)\fR\& can also be used\&.
.RE
.LP
.B
subscribe(EventCategory) -> {ok, Node} | {error, Reason}
.br
.RS
.LP
Ensures that a copy of all events of type \fIEventCategory\fR\& is sent to the caller\&. The available event types are described in the \fBUser\&'s Guide\fR\&\&.
.RE
.LP
.B
sync_dirty(Fun, [, Args]) -> ResultOfFun | exit(Reason)
.br
.RS
.LP
Calls the \fIFun\fR\& in a context that is not protected by a transaction\&. The Mnesia function calls performed in the \fIFun\fR\& are mapped to the corresponding dirty functions\&. It is performed in almost the same context as \fImnesia:async_dirty/1,2\fR\&\&. The difference is that the operations are performed synchronously\&. The caller waits for the updates to be performed on all active replicas before the \fIFun\fR\& returns\&. For details, see \fImnesia:activity/4\fR\& and the User\&'s Guide\&.
.RE
.LP
.B
sync_log() -> ok | {error, Reason}
.br
.RS
.LP
Ensures that the local transaction log file is synced to disk\&. On a single node system, data written to disk tables since the last dump can be lost if there is a power outage\&. See \fBdump_log/0\fR\&\&.
.RE
.LP
.B
sync_transaction(Fun, [[, Args], Retries]) -> {aborted, Reason} | {atomic, ResultOfFun}
.br
.RS
.LP
Waits until data have been committed and logged to disk (if disk is used) on every involved node before it returns, otherwise it behaves as \fImnesia:transaction/[1,2,3]\fR\&\&.
.LP
This functionality can be used to avoid that one process overloads a database on another node\&.
.RE
.LP
.B
system_info(InfoKey) -> Info | exit({aborted, Reason})
.br
.RS
.LP
Returns information about the Mnesia system, such as transaction statistics, \fIdb_nodes\fR\&, and configuration parameters\&. The valid keys are as follows:
.RS 2
.TP 2
*
\fIall\fR\&\&. Returns a list of all local system information\&. Each element is a \fI{InfoKey, InfoVal}\fR\& tuple\&.
.RS 2
.LP
New \fIInfoKey\fR\&s can be added and old undocumented \fIInfoKey\fR\&s can be removed without notice\&.
.RE
.LP
.TP 2
*
\fIaccess_module\fR\&\&. Returns the name of module that is configured to be the activity access callback module\&.
.LP
.TP 2
*
\fIauto_repair\fR\&\&. Returns \fItrue\fR\& or \fIfalse\fR\& to indicate if Mnesia is configured to start the auto-repair facility on corrupted disc files\&.
.LP
.TP 2
*
\fIbackup_module\fR\&\&. Returns the name of the module that is configured to be the backup callback module\&.
.LP
.TP 2
*
\fIcheckpoints\fR\&\&. Returns a list of the names of the checkpoints currently active on this node\&.
.LP
.TP 2
*
\fIevent_module\fR\&\&. Returns the name of the module that is the event handler callback module\&.
.LP
.TP 2
*
\fIdb_nodes\fR\&\&. Returns the nodes that make up the persistent database\&. Disc-less nodes are only included in the list of nodes if they explicitly have been added to the schema, for example, with \fImnesia:add_table_copy/3\fR\&\&. The function can be started even if Mnesia is not yet running\&.
.LP
.TP 2
*
\fIdebug\fR\&\&. Returns the current debug level of Mnesia\&.
.LP
.TP 2
*
\fIdirectory\fR\&\&. Returns the name of the Mnesia directory\&. It can be called even if Mnesia is not yet running\&.
.LP
.TP 2
*
\fIdump_log_load_regulation\fR\&\&. Returns a boolean that tells if Mnesia is configured to regulate the dumper process load\&.
.RS 2
.LP
This feature is temporary and will be removed in future releases\&.
.RE
.LP
.TP 2
*
\fIdump_log_time_threshold\fR\&\&. Returns the time threshold for transaction log dumps in milliseconds\&.
.LP
.TP 2
*
\fIdump_log_update_in_place\fR\&\&. Returns a boolean that tells if Mnesia is configured to perform the updates in the Dets files directly, or if the updates are to be performed in a copy of the Dets files\&.
.LP
.TP 2
*
\fIdump_log_write_threshold\fR\&\&. Returns the write threshold for transaction log dumps as the number of writes to the transaction log\&.
.LP
.TP 2
*
\fIextra_db_nodes\fR\&\&. Returns a list of extra \fIdb_nodes\fR\& to be contacted at startup\&.
.LP
.TP 2
*
\fIfallback_activated\fR\&\&. Returns \fItrue\fR\& if a fallback is activated, otherwise \fIfalse\fR\&\&.
.LP
.TP 2
*
\fIheld_locks\fR\&\&. Returns a list of all locks held by the local Mnesia lock manager\&.
.LP
.TP 2
*
\fIis_running\fR\&\&. Returns \fIyes\fR\& or \fIno\fR\& to indicate if Mnesia is running\&. It can also return \fIstarting\fR\& or \fIstopping\fR\&\&. Can be called even if Mnesia is not yet running\&.
.LP
.TP 2
*
\fIlocal_tables\fR\&\&. Returns a list of all tables that are configured to reside locally\&.
.LP
.TP 2
*
\fIlock_queue\fR\&\&. Returns a list of all transactions that are queued for execution by the local lock manager\&.
.LP
.TP 2
*
\fIlog_version\fR\&\&. Returns the version number of the Mnesia transaction log format\&.
.LP
.TP 2
*
\fImaster_node_tables\fR\&\&. Returns a list of all tables with at least one master node\&.
.LP
.TP 2
*
\fIprotocol_version\fR\&\&. Returns the version number of the Mnesia inter-process communication protocol\&.
.LP
.TP 2
*
\fIrunning_db_nodes\fR\&\&. Returns a list of nodes where Mnesia currently is running\&. This function can be called even if Mnesia is not yet running, but it then has slightly different semantics\&.
.RS 2
.LP
If Mnesia is down on the local node, the function returns those other \fIdb_nodes\fR\& and \fIextra_db_nodes\fR\& that for the moment are operational\&.
.RE
.RS 2
.LP
If Mnesia is started, the function returns those nodes that Mnesia on the local node is fully connected to\&. Only those nodes that Mnesia has exchanged schema information with are included as \fIrunning_db_nodes\fR\&\&. After the merge of schemas, the local Mnesia system is fully operable and applications can perform access of remote replicas\&. Before the schema merge, Mnesia only operates locally\&. Sometimes there are more nodes included in the \fIrunning_db_nodes\fR\& list than all \fIdb_nodes\fR\& and \fIextra_db_nodes\fR\& together\&.
.RE
.LP
.TP 2
*
\fIschema_location\fR\&\&. Returns the initial schema location\&.
.LP
.TP 2
*
\fIsubscribers\fR\&\&. Returns a list of local processes currently subscribing to system events\&.
.LP
.TP 2
*
\fItables\fR\&\&. Returns a list of all locally known tables\&.
.LP
.TP 2
*
\fItransactions\fR\&\&. Returns a list of all currently active local transactions\&.
.LP
.TP 2
*
\fItransaction_failures\fR\&\&. Returns a number that indicates how many transactions have failed since Mnesia was started\&.
.LP
.TP 2
*
\fItransaction_commits\fR\&\&. Returns a number that indicates how many transactions have terminated successfully since Mnesia was started\&.
.LP
.TP 2
*
\fItransaction_restarts\fR\&\&. Returns a number that indicates how many transactions have been restarted since Mnesia was started\&.
.LP
.TP 2
*
\fItransaction_log_writes\fR\&\&. Returns a number that indicates how many write operations that have been performed to the transaction log since startup\&.
.LP
.TP 2
*
\fIuse_dir\fR\&\&. Returns a boolean that indicates if the Mnesia directory is used or not\&. Can be started even if Mnesia is not yet running\&.
.LP
.TP 2
*
\fIversion\fR\&\&. Returns the current version number of Mnesia\&.
.LP
.RE

.RE
.LP
.B
table(Tab [,[Option]]) -> QueryHandle
.br
.RS
.LP
Returns a Query List Comprehension (QLC) query handle, see the \fBqlc(3)\fR\& manual page in STDLIB\&. The module \fIqlc\fR\& implements a query language that can use Mnesia tables as sources of data\&. Calling \fImnesia:table/1,2\fR\& is the means to make the \fImnesia\fR\& table \fITab\fR\& usable to QLC\&.
.LP
\fIOption\fR\& can contain Mnesia options or QLC options\&. Mnesia recognizes the following options (any other option is forwarded to QLC)\&.
.RS 2
.TP 2
*
\fI{lock, Lock}\fR\&, where \fIlock\fR\& can be \fIread\fR\& or \fIwrite\fR\&\&. Default is \fIread\fR\&\&. 
.LP
.TP 2
*
\fI{n_objects,Number}\fR\&, where \fIn_objects\fR\& specifies (roughly) the number of objects returned from Mnesia to QLC\&. Queries to remote tables can need a larger chunk to reduce network overhead\&. By default, \fI100\fR\& objects at a time are returned\&. 
.LP
.TP 2
*
\fI{traverse, SelectMethod}\fR\&, where \fItraverse\fR\& determines the method to traverse the whole table (if needed)\&. The default method is \fIselect\fR\&\&. 
.LP
.RE

.LP
There are two alternatives for \fIselect\fR\&:
.RS 2
.TP 2
*
\fIselect\fR\&\&. The table is traversed by calling \fImnesia:select/4\fR\& and \fImnesia:select/1\fR\&\&. The match specification (the second argument of \fIselect/3\fR\&) is assembled by QLC: simple filters are translated into equivalent match specifications\&. More complicated filters need to be applied to all objects returned by \fIselect/3\fR\& given a match specification that matches all objects\&.
.LP
.TP 2
*
\fI{select, MatchSpec}\fR\&\&. As for \fIselect\fR\&, the table is traversed by calling \fImnesia:select/3\fR\& and \fImnesia:select/1\fR\&\&. The difference is that the match specification is explicitly given\&. This is how to state match specifications that cannot easily be expressed within the syntax provided by QLC\&.
.LP
.RE

.RE
.LP
.B
table_info(Tab, InfoKey) -> Info | exit({aborted, Reason})
.br
.RS
.LP
The \fItable_info/2\fR\& function takes two arguments\&. The first is the name of a Mnesia table\&. The second is one of the following keys:
.RS 2
.TP 2
*
\fIall\fR\&\&. Returns a list of all local table information\&. Each element is a \fI{InfoKey, ItemVal}\fR\& tuple\&.
.RS 2
.LP
New \fIInfoItem\fR\&s can be added and old undocumented \fIInfoItem\fR\&s can be removed without notice\&.
.RE
.LP
.TP 2
*
\fIaccess_mode\fR\&\&. Returns the access mode of the table\&. The access mode can be \fIread_only\fR\& or \fIread_write\fR\&\&.
.LP
.TP 2
*
\fIarity\fR\&\&. Returns the arity of records in the table as specified in the schema\&.
.LP
.TP 2
*
\fIattributes\fR\&\&. Returns the table attribute names that are specified in the schema\&.
.LP
.TP 2
*
\fIcheckpoints\fR\&\&. Returns the names of the currently active checkpoints, which involve this table on this node\&.
.LP
.TP 2
*
\fIcookie\fR\&\&. Returns a table cookie, which is a unique system-generated identifier for the table\&. The cookie is used internally to ensure that two different table definitions using the same table name cannot accidentally be intermixed\&. The cookie is generated when the table is created initially\&.
.LP
.TP 2
*
\fIdisc_copies\fR\&\&. Returns the nodes where a \fIdisc_copy\fR\& of the table resides according to the schema\&.
.LP
.TP 2
*
\fIdisc_only_copies\fR\&\&. Returns the nodes where a \fIdisc_only_copy\fR\& of the table resides according to the schema\&.
.LP
.TP 2
*
\fIindex\fR\&\&. Returns the list of index position integers for the table\&.
.LP
.TP 2
*
\fIload_node\fR\&\&. Returns the name of the node that Mnesia loaded the table from\&. The structure of the returned value is unspecified, but can be useful for debugging purposes\&.
.LP
.TP 2
*
\fIload_order\fR\&\&. Returns the load order priority of the table\&. It is an integer and defaults to \fI0\fR\& (zero)\&.
.LP
.TP 2
*
\fIload_reason\fR\&\&. Returns the reason of why Mnesia decided to load the table\&. The structure of the returned value is unspecified, but can be useful for debugging purposes\&.
.LP
.TP 2
*
\fIlocal_content\fR\&\&. Returns \fItrue\fR\& or \fIfalse\fR\& to indicate if the table is configured to have locally unique content on each node\&.
.LP
.TP 2
*
\fImaster_nodes\fR\&\&. Returns the master nodes of a table\&.
.LP
.TP 2
*
\fImemory\fR\&\&. Returns the number of words allocated to the table on this node\&.
.LP
.TP 2
*
\fIram_copies\fR\&\&. Returns the nodes where a \fIram_copy\fR\& of the table resides according to the schema\&.
.LP
.TP 2
*
\fIrecord_name\fR\&\&. Returns the record name, common for all records in the table\&.
.LP
.TP 2
*
\fIsize\fR\&\&. Returns the number of records inserted in the table\&.
.LP
.TP 2
*
\fIsnmp\fR\&\&. Returns the SNMP struct\&. \fI[]\fR\& means that the table currently has no SNMP properties\&.
.LP
.TP 2
*
\fIstorage_type\fR\&\&. Returns the local storage type of the table\&. It can be \fIdisc_copies\fR\&, \fIram_copies\fR\&, \fIdisc_only_copies\fR\&, or the atom \fIunknown\fR\&\&. \fIunknown\fR\& is returned for all tables that only reside remotely\&.
.LP
.TP 2
*
\fIsubscribers\fR\&\&. Returns a list of local processes currently subscribing to local table events that involve this table on this node\&.
.LP
.TP 2
*
\fItype\fR\&\&. Returns the table type, which is \fIbag\fR\&, \fIset\fR\&, or \fIordered_set\fR\&\&.
.LP
.TP 2
*
\fIuser_properties\fR\&\&. Returns the user-associated table properties of the table\&. It is a list of the stored property records\&.
.LP
.TP 2
*
\fIversion\fR\&\&. Returns the current version of the table definition\&. The table version is incremented when the table definition is changed\&. The table definition can be incremented directly when it has been changed in a schema transaction, or when a committed table definition is merged with table definitions from other nodes during startup\&.
.LP
.TP 2
*
\fIwhere_to_read\fR\&\&. Returns the node where the table can be read\&. If value \fInowhere\fR\& is returned, either the table is not loaded or it resides at a remote node that is not running\&.
.LP
.TP 2
*
\fIwhere_to_write\fR\&\&. Returns a list of the nodes that currently hold an active replica of the table\&.
.LP
.TP 2
*
\fIwild_pattern\fR\&\&. Returns a structure that can be given to the various match functions for a certain table\&. A record tuple is where all record fields have value \fI\&'_\&'\fR\&\&.
.LP
.RE

.RE
.LP
.B
transaction(Fun [[, Args], Retries]) -> {aborted, Reason} | {atomic, ResultOfFun}
.br
.RS
.LP
Executes the functional object \fIFun\fR\& with arguments \fIArgs\fR\& as a transaction\&.
.LP
The code that executes inside the transaction can consist of a series of table manipulation functions\&. If something goes wrong inside the transaction as a result of a user error or a certain table not being available, the entire transaction is terminated and the function \fItransaction/1\fR\& returns the tuple \fI{aborted, Reason}\fR\&\&.
.LP
If all is going well, \fI{atomic, ResultOfFun}\fR\& is returned, where \fIResultOfFun\fR\& is the value of the last expression in \fIFun\fR\&\&.
.LP
A function that adds a family to the database can be written as follows if there is a structure \fI{family, Father, Mother, ChildrenList}\fR\&:
.LP
.nf

add_family({family, F, M, Children}) ->
    ChildOids = lists:map(fun oid/1, Children),
    Trans = fun() ->      
        mnesia:write(F#person{children = ChildOids}, 
        mnesia:write(M#person{children = ChildOids},
        Write = fun(Child) -> mnesia:write(Child) end,
        lists:foreach(Write, Children)
    end,
    mnesia:transaction(Trans).

oid(Rec) -> {element(1, Rec), element(2, Rec)}.
.fi
.LP
This code adds a set of people to the database\&. Running this code within one transaction ensures that either the whole family is added to the database, or the whole transaction terminates\&. For example, if the last child is badly formatted, or the executing process terminates because of an \fI\&'EXIT\&'\fR\& signal while executing the family code, the transaction terminates\&. Thus, the situation where half a family is added can never occur\&.
.LP
It is also useful to update the database within a transaction if several processes concurrently update the same records\&. For example, the function \fIraise(Name, Amount)\fR\&, which adds \fIAmount\fR\& to the salary field of a person, is to be implemented as follows:
.LP
.nf

raise(Name, Amount) ->
    mnesia:transaction(fun() ->
        case mnesia:wread({person, Name}) of
            [P] ->
                Salary = Amount + P#person.salary,
                P2 = P#person{salary = Salary},
                mnesia:write(P2);
            _ ->
                mnesia:abort("No such person")
        end
    end).
.fi
.LP
When this function executes within a transaction, several processes running on different nodes can concurrently execute the function \fIraise/2\fR\& without interfering with each other\&.
.LP
Since Mnesia detects deadlocks, a transaction can be restarted any number of times\&. This function attempts a restart as specified in \fIRetries\fR\&\&. \fIRetries\fR\& must be an integer greater than 0 or the atom \fIinfinity\fR\&\&. Default is \fIinfinity\fR\&\&.
.RE
.LP
.B
transform_table(Tab, Fun, NewAttributeList, NewRecordName) -> {aborted, R} | {atomic, ok}
.br
.RS
.LP
Applies argument \fIFun\fR\& to all records in the table\&. \fIFun\fR\& is a function that takes a record of the old type and returns a transformed record of the new type\&. Argument \fIFun\fR\& can also be the atom \fIignore\fR\&, which indicates that only the metadata about the table is updated\&. Use of \fIignore\fR\& is not recommended, but included as a possibility for the user do to an own transformation\&.
.LP
\fINewAttributeList\fR\& and \fINewRecordName\fR\& specify the attributes and the new record type of the converted table\&. Table name always remains unchanged\&. If \fIrecord_name\fR\& is changed, only the Mnesia functions that use table identifiers work, for example, \fImnesia:write/3\fR\& works, but not \fImnesia:write/1\fR\&\&.
.RE
.LP
.B
transform_table(Tab, Fun, NewAttributeList) -> {aborted, R} | {atomic, ok}
.br
.RS
.LP
Calls \fImnesia:transform_table(Tab, Fun, NewAttributeList, RecName)\fR\&, where \fIRecName\fR\& is \fImnesia:table_info(Tab, record_name)\fR\&\&.
.RE
.LP
.B
traverse_backup(Source, [SourceMod,] Target, [TargetMod,] Fun, Acc) -> {ok, LastAcc} | {error, Reason}
.br
.RS
.LP
Iterates over a backup, either to transform it into a new backup, or read it\&. The arguments are explained briefly here\&. For details, see the User\&'s Guide\&.
.RS 2
.TP 2
*
\fISourceMod\fR\& and \fITargetMod\fR\& are the names of the modules that actually access the backup media\&. 
.LP
.TP 2
*
\fISource\fR\& and \fITarget\fR\& are opaque data used exclusively by modules \fISourceMod\fR\& and \fITargetMod\fR\& to initialize the backup media\&. 
.LP
.TP 2
*
\fIAcc\fR\& is an initial accumulator value\&. 
.LP
.TP 2
*
\fIFun(BackupItems, Acc)\fR\& is applied to each item in the backup\&. The \fIFun\fR\& must return a tuple \fI{BackupItems,NewAcc}\fR\&, where \fIBackupItems\fR\& is a list of valid backup items, and \fINewAcc\fR\& is a new accumulator value\&. The returned backup items are written in the target backup\&. 
.LP
.TP 2
*
\fILastAcc\fR\& is the last accumulator value\&. This is the last \fINewAcc\fR\& value that was returned by \fIFun\fR\&\&. 
.LP
.RE

.RE
.LP
.B
uninstall_fallback() -> ok | {error,Reason}
.br
.RS
.LP
Calls the function \fImnesia:uninstall_fallback([{scope, global}])\fR\&\&.
.RE
.LP
.B
uninstall_fallback(Args) -> ok | {error,Reason}
.br
.RS
.LP
Deinstalls a fallback before it has been used to restore the database\&. This is normally a distributed operation that is either performed on all nodes with disc resident schema, or none\&. Uninstallation of fallbacks requires Erlang to be operational on all involved nodes, but it does not matter if Mnesia is running or not\&. Which nodes that are considered as disc-resident nodes is determined from the schema information in the local fallback\&.
.LP
\fIArgs\fR\& is a list of the following tuples:
.RS 2
.TP 2
*
\fI{module, BackupMod}\fR\&\&. For semantics, see \fImnesia:install_fallback/2\fR\&\&. 
.LP
.TP 2
*
\fI{scope, Scope}\fR\&\&. For semantics, see \fImnesia:install_fallback/2\fR\&\&. 
.LP
.TP 2
*
\fI{mnesia_dir, AlternateDir}\fR\&\&. For semantics, see \fImnesia:install_fallback/2\fR\&\&. 
.LP
.RE

.RE
.LP
.B
unsubscribe(EventCategory) -> {ok, Node} | {error, Reason}
.br
.RS
.LP
Stops sending events of type \fIEventCategory\fR\& to the caller\&.
.LP
\fINode\fR\& is the local node\&.
.RE
.LP
.B
wait_for_tables(TabList, Timeout) -> ok | {timeout, BadTabList} | {error, Reason}
.br
.RS
.LP
Some applications need to wait for certain tables to be accessible to do useful work\&. \fImnesia:wait_for_tables/2\fR\& either hangs until all tables in \fITabList\fR\& are accessible, or until \fItimeout\fR\& is reached\&.
.RE
.LP
.B
wread({Tab, Key}) -> transaction abort | RecordList
.br
.RS
.LP
Calls the function \fImnesia:read(Tab, Key, write)\fR\&\&.
.RE
.LP
.B
write(Record) -> transaction abort | ok
.br
.RS
.LP
Calls the function \fImnesia:write(Tab, Record, write)\fR\&, where \fITab\fR\& is \fIelement(1, Record)\fR\&\&.
.RE
.LP
.B
write(Tab, Record, LockKind) -> transaction abort | ok
.br
.RS
.LP
Writes record \fIRecord\fR\& to table \fITab\fR\&\&.
.LP
The function returns \fIok\fR\&, or terminates if an error occurs\&. For example, the transaction terminates if no \fIperson\fR\& table exists\&.
.LP
The semantics of this function is context-sensitive\&. For details, see \fImnesia:activity/4\fR\&\&. In transaction-context, it acquires a lock of type \fILockKind\fR\&\&. The lock types \fIwrite\fR\& and \fIsticky_write\fR\& are supported\&.
.RE
.LP
.B
write_lock_table(Tab) -> ok | transaction abort
.br
.RS
.LP
Calls the function \fImnesia:lock({table, Tab}, write)\fR\&\&.
.RE
.SH "CONFIGURATION PARAMETERS"

.LP
Mnesia reads the following application configuration parameters:
.RS 2
.TP 2
*
\fI-mnesia access_module Module\fR\&\&. The name of the Mnesia activity access callback module\&. Default is \fImnesia\fR\&\&.
.LP
.TP 2
*
\fI-mnesia auto_repair true | false\fR\&\&. This flag controls if Mnesia automatically tries to repair files that have not been properly closed\&. Default is \fItrue\fR\&\&.
.LP
.TP 2
*
\fI-mnesia backup_module Module\fR\&\&. The name of the Mnesia backup callback module\&. Default is \fImnesia_backup\fR\&\&.
.LP
.TP 2
*
\fI-mnesia debug Level\fR\&\&. Controls the debug level of Mnesia\&. The possible values are as follows:
.RS 2
.TP 2
.B
\fInone\fR\&:
No trace outputs\&. This is the default\&.
.TP 2
.B
\fIverbose\fR\&:
Activates tracing of important debug events\&. These events generate \fI{mnesia_info, Format, Args}\fR\& system events\&. Processes can subscribe to these events with \fImnesia:subscribe/1\fR\&\&. The events are always sent to the Mnesia event handler\&.
.TP 2
.B
\fIdebug\fR\&:
Activates all events at the verbose level plus full trace of all debug events\&. These debug events generate \fI{mnesia_info, Format, Args}\fR\& system events\&. Processes can subscribe to these events with \fImnesia:subscribe/1\fR\&\&. The events are always sent to the Mnesia event handler\&. On this debug level, the Mnesia event handler starts subscribing to updates in the schema table\&.
.TP 2
.B
\fItrace\fR\&:
Activates all events at the debug level\&. On this level, the Mnesia event handler starts subscribing to updates on all Mnesia tables\&. This level is intended only for debugging small toy systems, as many large events can be generated\&.
.TP 2
.B
\fIfalse\fR\&:
An alias for none\&. 
.TP 2
.B
\fItrue\fR\&:
An alias for debug\&. 
.RE
.LP
.TP 2
*
\fI-mnesia core_dir Directory\fR\&\&. The name of the directory where Mnesia core files is stored, or false\&. Setting it implies that also RAM-only nodes generate a core file if a crash occurs\&.
.LP
.TP 2
*
\fI-mnesia dc_dump_limit Number\fR\&\&. Controls how often \fIdisc_copies\fR\& tables are dumped from memory\&. Tables are dumped when \fIfilesize(Log) > (filesize(Tab)/Dc_dump_limit)\fR\&\&. Lower values reduce CPU overhead but increase disk space and startup times\&. Default is 4\&.
.LP
.TP 2
*
\fI-mnesia dir Directory\fR\&\&. The name of the directory where all Mnesia data is stored\&. The directory name must be unique for the current node\&. Two nodes must never share the the same Mnesia directory\&. The results are unpredictable\&.
.LP
.TP 2
*
\fI-mnesia dump_disc_copies_at_startup true | false\fR\&\&. If set to false, this disables the dumping of \fIdisc_copies\fR\& tables during startup while tables are being loaded\&. The default is true\&.
.LP
.TP 2
*
\fI-mnesia dump_log_load_regulation true | false\fR\&\&. Controls if log dumps are to be performed as fast as possible, or if the dumper is to do its own load regulation\&. Default is \fIfalse\fR\&\&.
.RS 2
.LP
This feature is temporary and will be removed in a future release
.RE
.LP
.TP 2
*
\fI-mnesia dump_log_update_in_place true | false\fR\&\&. Controls if log dumps are performed on a copy of the original data file, or if the log dump is performed on the original data file\&. Default is \fItrue\fR\&
.LP
.TP 2
*

.RS 2
.LP
\fI-mnesia dump_log_write_threshold Max\fR\&\&. \fIMax\fR\& is an integer that specifies the maximum number of writes allowed to the transaction log before a new dump of the log is performed\&. Default is \fI100\fR\& log writes\&.
.RE
.LP
.TP 2
*

.RS 2
.LP
\fI-mnesia dump_log_time_threshold Max\fR\&\&. \fIMax\fR\& is an integer that specifies the dump log interval in milliseconds\&. Default is 3 minutes\&. If a dump has not been performed within \fIdump_log_time_threshold\fR\& milliseconds, a new dump is performed regardless of the number of writes performed\&.
.RE
.LP
.TP 2
*
\fI-mnesia event_module Module\fR\&\&. The name of the Mnesia event handler callback module\&. Default is \fImnesia_event\fR\&\&.
.LP
.TP 2
*
\fI-mnesia extra_db_nodes Nodes\fR\& specifies a list of nodes, in addition to the ones found in the schema, with which Mnesia is also to establish contact\&. Default is \fI[]\fR\& (empty list)\&.
.LP
.TP 2
*
\fI-mnesia fallback_error_function {UserModule, UserFunc}\fR\&\&. Specifies a user-supplied callback function, which is called if a fallback is installed and Mnesia goes down on another node\&. Mnesia calls the function with one argument, the name of the dying node, for example, \fIUserModule:UserFunc(DyingNode)\fR\&\&. Mnesia must be restarted, otherwise the database can be inconsistent\&. The default behavior is to terminate Mnesia\&.
.LP
.TP 2
*
\fI-mnesia max_wait_for_decision Timeout\fR\&\&. Specifies how long Mnesia waits for other nodes to share their knowledge about the outcome of an unclear transaction\&. By default, \fITimeout\fR\& is set to the atom \fIinfinity\fR\&\&. This implies that if Mnesia upon startup detects a "heavyweight transaction" whose outcome is unclear, the local Mnesia waits until Mnesia is started on some (in the worst case all) of the other nodes that were involved in the interrupted transaction\&. This is a rare situation, but if it occurs, Mnesia does not guess if the transaction on the other nodes was committed or terminated\&. Mnesia waits until it knows the outcome and then acts accordingly\&.
.RS 2
.LP
If \fITimeout\fR\& is set to an integer value in milliseconds, Mnesia forces "heavyweight transactions" to be finished, even if the outcome of the transaction for the moment is unclear\&. After \fITimeout\fR\& milliseconds, Mnesia commits or terminates the transaction and continues with the startup\&. This can lead to a situation where the transaction is committed on some nodes and terminated on other nodes\&. If the transaction is a schema transaction, the inconsistency can be fatal\&.
.RE
.LP
.TP 2
*
\fI-mnesia no_table_loaders NUMBER\fR\&\&. Specifies the number of parallel table loaders during start\&. More loaders can be good if the network latency is high or if many tables contain few records\&. Default is \fI2\fR\&\&.
.LP
.TP 2
*
\fI-mnesia send_compressed Level\fR\&\&. Specifies the level of compression to be used when copying a table from the local node to another one\&. Default is \fI0\fR\&\&.
.RS 2
.LP
\fILevel\fR\& must be an integer in the interval \fI[0, 9]\fR\&, where \fI0\fR\& means no compression and \fI9\fR\& means maximum compression\&. Before setting it to a non-zero value, ensure that the remote nodes understand this configuration\&.
.RE
.LP
.TP 2
*
\fI-mnesia schema_location Loc\fR\&\&. Controls where Mnesia looks for its schema\&. Parameter \fILoc\fR\& can be one of the following atoms:
.RS 2
.TP 2
.B
\fIdisc\fR\&:
Mandatory disc\&. The schema is assumed to be located in the Mnesia directory\&. If the schema cannot be found, Mnesia refuses to start\&. This is the old behavior\&.
.TP 2
.B
\fIram\fR\&:
Mandatory RAM\&. The schema resides in RAM only\&. At startup, a tiny new schema is generated\&. This default schema only contains the definition of the schema table and only resides on the local node\&. Since no other nodes are found in the default schema, configuration parameter \fIextra_db_nodes\fR\& must be used to let the node share its table definitions with other nodes\&.
.RS 2
.LP
Parameter \fIextra_db_nodes\fR\& can also be used on disc based nodes\&.
.RE
.TP 2
.B
\fIopt_disc\fR\&:
Optional disc\&. The schema can reside on disc or in RAM\&. If the schema is found on disc, Mnesia starts as a disc-based node and the storage type of the schema table is \fIdisc_copies\fR\&\&. If no schema is found on disc, Mnesia starts as a disc-less node and the storage type of the schema table is \fIram_copies\fR\&\&. Default value for the application parameter is \fIopt_disc\fR\&\&.
.RE
.LP
.RE

.LP
First, the SASL application parameters are checked, then the command-line flags are checked, and finally, the default value is chosen\&.
.SH "SEE ALSO"

.LP
\fBapplication(3)\fR\&, \fBdets(3)\fR\&, \fBdisk_log(3)\fR\&, \fBets(3)\fR\&, \fBmnesia_registry(3)\fR\&, \fBqlc(3)\fR\&