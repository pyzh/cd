.TH logger_disk_log_h 3 "kernel 5.4.3" "Ericsson AB" "Erlang Module Definition"
.SH NAME
logger_disk_log_h \- A disk_log based handler for the Logger.
.SH DESCRIPTION
.LP
This is a handler for Logger that offers circular (wrapped) logs by using \fB\fIdisk_log\fR\&\fR\&\&. Multiple instances of this handler can be added to Logger, and each instance prints to its own disk_log file, created with the name and settings specified in the handler configuration\&.
.LP
The default standard handler, \fB\fIlogger_std_h\fR\&\fR\&, can be replaced by a disk_log handler at start up of the Kernel application\&. See an example of this below\&.
.LP
The handler has an overload protection mechanism that will keep the handler process and the Kernel application alive during a high load of log requests\&. How this feature works, and how to modify the configuration, is described in the \fB\fIUser\&'s Guide\fR\&\fR\&\&.
.LP
To add a new instance of the disk_log handler, use \fB\fIlogger:add_handler/3\fR\&\fR\&\&. The handler configuration argument is a map which may contain general configuration parameters, as documented in the \fB\fIUser\&'s Guide\fR\&\fR\&, as well as handler specific parameters\&.
.LP
The settings for the disk_log log file should be specified with the key \fIdisk_log_opts\fR\&\&. These settings are a subset of the disk_log data type \fB\fIdlog_option()\fR\&\fR\&\&.
.LP
Parameters in the \fIdisk_log_opts\fR\& map:
.RS 2
.TP 2
.B
\fIfile\fR\&:
This is the full name of the disk_log log file\&.
.TP 2
.B
\fItype\fR\&:
This is the disk_log type, \fIwrap\fR\& or \fIhalt\fR\&\&. The default value is \fIwrap\fR\&\&.
.TP 2
.B
\fImax_no_files\fR\&:
This is the maximum number of files that disk_log will use for its circular logging\&. The default value is \fI10\fR\&\&. (The setting has no effect on a halt log)\&.
.TP 2
.B
\fImax_no_bytes\fR\&:
This is the maximum number of bytes that will be written to a log file before disk_log proceeds with the next file in order (or generates an error in case of a full halt log)\&. The default value for a wrap log is \fI1048576\fR\& bytes, and \fIinfinity\fR\& for a halt log\&.
.RE
.LP
Specific configuration for the handler (represented as a sub map) is specified with the key \fIconfig\fR\&\&. It may contain the following parameter:
.RS 2
.TP 2
.B
\fIfilesync_repeat_interval\fR\&:
This value (in milliseconds) specifies how often the handler will do a disk_log sync operation in order to make sure that buffered data gets written to disk\&. The handler will repeatedly attempt this operation, but only perform it if something has actually been logged since the last sync\&. The default value is \fI5000\fR\& milliseconds\&. If \fIno_repeat\fR\& is set as value, the repeated sync operation is disabled\&. The user can also call the \fB\fIsync/1\fR\&\fR\& function to perform a disk_log sync\&.
.RE
.LP
There are a number of other configuration parameters available, that are to be used for customizing the overload protection behaviour\&. The same parameters are used both in the standard handler and the disk_log handler, and are documented in the \fB\fIUser\&'s Guide\fR\&\fR\&\&.
.LP
Note that when changing the configuration of the handler in runtime, by calling \fB\fIlogger:set_handler_config/2 or logger:set_handler_config/3\fR\&\fR\&, the \fIdisk_log_opts\fR\& settings may not be modified\&.
.LP
Example of adding a disk_log handler:
.LP
.nf

logger:add_handler(my_disk_log_h, logger_disk_log_h,
                   #{level => error,
                     filter_default => log,
                     disk_log_opts =>
                              #{file => "./my_disk_log",
                                type => wrap,
                                max_no_files => 4,
                                max_no_bytes => 10000},
                     config =>
                              #{filesync_repeat_interval => 1000}}).
    
.fi
.LP
In order to use the disk_log handler instead of the default standard handler when starting an Erlang node, change the Kernel default logger to use disk_log\&. Example:
.LP
.nf

erl -kernel logger '[{handler,default,logger_disk_log_h,
                      #{disk_log_opts => #{file => "./system_disk_log"}}}]'
    
.fi
.SH EXPORTS
.LP
.nf

.B
sync(Name) -> ok | {error, Reason}
.br
.fi
.br
.RS
.LP
Types:

.RS 3
Name = atom()
.br
Reason = handler_busy | {badarg, term()}
.br
.RE
.RE
.RS
.LP
Write buffered data to disk\&.
.RE
.SH "SEE ALSO"

.LP
\fB\fIlogger(3)\fR\&\fR\&, \fB\fIlogger_std_h(3)\fR\&\fR\&, \fB\fIdisk_log(3)\fR\&\fR\&